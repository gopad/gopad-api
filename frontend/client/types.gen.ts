// This file is auto-generated by @hey-api/openapi-ts

export type AuthToken = {
    readonly token: string;
    readonly expires_at?: string;
};

export type AuthVerify = {
    readonly username: string;
    readonly created_at?: string;
};

/**
 * Profile
 * Model to represent profile
 */
export type ProfileReadable = {
    id?: string;
    username?: string;
    password?: string;
    email?: string;
    fullname?: string;
    profile?: string;
    readonly admin?: boolean;
    readonly active?: boolean;
    readonly created_at?: string;
    readonly updated_at?: string;
    readonly auths?: Array<UserAuthReadable>;
    readonly groups?: Array<UserGroupReadable>;
};

/**
 * Profile
 * Model to represent profile
 */
export type ProfileWritable = {
    id?: string;
    username?: string;
    password?: string;
    email?: string;
    fullname?: string;
    profile?: string;
};

/**
 * Group
 * Model to represent group
 */
export type GroupReadable = {
    id?: string;
    slug?: string;
    name?: string;
    readonly created_at?: string;
    readonly updated_at?: string;
};

/**
 * Group
 * Model to represent group
 */
export type GroupWritable = {
    id?: string;
    slug?: string;
    name?: string;
};

/**
 * User
 * Model to represent user
 */
export type UserReadable = {
    id?: string;
    username?: string;
    password?: string;
    email?: string;
    fullname?: string;
    profile?: string;
    admin?: boolean;
    active?: boolean;
    readonly created_at?: string;
    readonly updated_at?: string;
    readonly auths?: Array<UserAuthReadable>;
};

/**
 * User
 * Model to represent user
 */
export type UserWritable = {
    id?: string;
    username?: string;
    password?: string;
    email?: string;
    fullname?: string;
    profile?: string;
    admin?: boolean;
    active?: boolean;
};

/**
 * User Auth
 * Model to represent user auth
 */
export type UserAuthReadable = {
    provider?: string;
    ref?: string;
    readonly created_at?: string;
    readonly updated_at?: string;
};

/**
 * User Auth
 * Model to represent user auth
 */
export type UserAuthWritable = {
    provider?: string;
    ref?: string;
};

/**
 * User Group
 * Model to represent user group
 */
export type UserGroupReadable = {
    user_id: string;
    user?: UserReadable;
    group_id: string;
    group?: GroupReadable;
    perm?: 'owner' | 'user' | 'admin';
    readonly created_at?: string;
    readonly updated_at?: string;
};

/**
 * User Group
 * Model to represent user group
 */
export type UserGroupWritable = {
    user_id: string;
    user?: UserWritable;
    group_id: string;
    group?: GroupWritable;
    perm?: 'owner' | 'user' | 'admin';
};

/**
 * Provider
 * Model to represent auth provider
 */
export type Provider = {
    readonly name?: string;
    readonly driver?: string;
    readonly display?: string;
    readonly icon?: string;
};

/**
 * Notification
 * Generic response for errors and validations
 */
export type Notification = {
    status?: number;
    message?: string;
    errors?: Array<Validation>;
};

/**
 * Validation
 * General structure to show validation errors
 */
export type Validation = {
    field?: string;
    message?: string;
};

/**
 * Search query
 */
export type SearchQueryParam = string;

/**
 * Paging limit
 */
export type PagingLimitParam = number;

/**
 * Paging offset
 */
export type PagingOffsetParam = number;

/**
 * Sorting column
 */
export type SortColumnParam = string;

/**
 * Sorting order
 */
export type SortOrderParam = 'asc' | 'desc';

/**
 * An identifier for the auth provider
 */
export type AuthProviderParam = string;

/**
 * Auth state
 */
export type AuthStateParam = string;

/**
 * Auth code
 */
export type AuthCodeParam = string;

/**
 * A group identifier or slug
 */
export type GroupParam = string;

/**
 * A user identifier or slug
 */
export type UserParam = string;

/**
 * The redirect token to authenticate
 */
export type RedirectAuthBody = {
    token: string;
};

/**
 * The credentials to authenticate
 */
export type LoginAuthBody = {
    username: string;
    password: string;
};

/**
 * The profile data to update
 */
export type UpdateProfileBody = {
    username?: string;
    password?: string;
    email?: string;
    fullname?: string;
};

/**
 * The group data to create
 */
export type CreateGroupBody = {
    slug?: string;
    name?: string;
};

/**
 * The group data to update
 */
export type UpdateGroupBody = {
    slug?: string;
    name?: string;
};

/**
 * The group user data to permit
 */
export type GroupUserPermBody = {
    user: string;
    perm: string;
};

/**
 * The group user data to unlink
 */
export type GroupUserDropBody = {
    user: string;
};

/**
 * The user data to create
 */
export type CreateUserBody = {
    username?: string;
    password?: string;
    email?: string;
    fullname?: string;
    admin?: boolean;
    active?: boolean;
};

/**
 * The user data to update
 */
export type UpdateUserBody = {
    username?: string;
    password?: string;
    email?: string;
    fullname?: string;
    admin?: boolean;
    active?: boolean;
};

/**
 * The user group data to permit
 */
export type UserGroupPermBody = {
    group: string;
    perm: string;
};

/**
 * The user group data to unlink
 */
export type UserGroupDropBody = {
    group: string;
};

export type RequestProviderData = {
    body?: never;
    path: {
        /**
         * An identifier for the auth provider
         */
        provider: string;
    };
    query?: never;
    url: '/auth/{provider}/request';
};

export type RequestProviderErrors = {
    /**
     * Provider not found
     */
    404: string;
    /**
     * Internal server error
     */
    500: string;
};

export type RequestProviderError = RequestProviderErrors[keyof RequestProviderErrors];

export type CallbackProviderData = {
    body?: never;
    path: {
        /**
         * An identifier for the auth provider
         */
        provider: string;
    };
    query?: {
        /**
         * Auth state
         */
        state?: string;
        /**
         * Auth code
         */
        code?: string;
    };
    url: '/auth/{provider}/callback';
};

export type CallbackProviderErrors = {
    /**
     * Provider not found
     */
    404: string;
    /**
     * Failed to initialize provider
     */
    412: string;
    /**
     * Internal server error
     */
    500: string;
};

export type CallbackProviderError = CallbackProviderErrors[keyof CallbackProviderErrors];

export type ListProvidersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/providers';
};

export type ListProvidersResponses = {
    /**
     * A collection of auth providers
     */
    200: {
        total: number;
        providers: Array<Provider>;
    };
};

export type ListProvidersResponse = ListProvidersResponses[keyof ListProvidersResponses];

export type RedirectAuthData = {
    /**
     * The redirect token to authenticate
     */
    body: RedirectAuthBody;
    path?: never;
    query?: never;
    url: '/auth/redirect';
};

export type RedirectAuthErrors = {
    /**
     * Failed to parse request
     */
    400: Notification;
    /**
     * Failed to generate or validate token
     */
    401: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type RedirectAuthError = RedirectAuthErrors[keyof RedirectAuthErrors];

export type RedirectAuthResponses = {
    /**
     * Generated token never expiring
     */
    200: AuthToken;
};

export type RedirectAuthResponse = RedirectAuthResponses[keyof RedirectAuthResponses];

export type LoginAuthData = {
    /**
     * The credentials to authenticate
     */
    body: LoginAuthBody;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type LoginAuthErrors = {
    /**
     * Failed to parse request
     */
    400: Notification;
    /**
     * Unauthorized with wrong credentials
     */
    401: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type LoginAuthError = LoginAuthErrors[keyof LoginAuthErrors];

export type LoginAuthResponses = {
    /**
     * Generated token with expire date
     */
    200: AuthToken;
};

export type LoginAuthResponse = LoginAuthResponses[keyof LoginAuthResponses];

export type RefreshAuthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type RefreshAuthErrors = {
    /**
     * Failed to generate or validate token
     */
    401: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type RefreshAuthError = RefreshAuthErrors[keyof RefreshAuthErrors];

export type RefreshAuthResponses = {
    /**
     * Refreshed token with expire date
     */
    200: AuthToken;
};

export type RefreshAuthResponse = RefreshAuthResponses[keyof RefreshAuthResponses];

export type VerifyAuthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/verify';
};

export type VerifyAuthErrors = {
    /**
     * Failed to generate or validate token
     */
    401: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type VerifyAuthError = VerifyAuthErrors[keyof VerifyAuthErrors];

export type VerifyAuthResponses = {
    /**
     * Metadata of the auth token
     */
    200: AuthVerify;
};

export type VerifyAuthResponse = VerifyAuthResponses[keyof VerifyAuthResponses];

export type TokenProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/profile/token';
};

export type TokenProfileErrors = {
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type TokenProfileError = TokenProfileErrors[keyof TokenProfileErrors];

export type TokenProfileResponses = {
    /**
     * Generated token never expiring
     */
    200: AuthToken;
};

export type TokenProfileResponse = TokenProfileResponses[keyof TokenProfileResponses];

export type ShowProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/profile/self';
};

export type ShowProfileErrors = {
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type ShowProfileError = ShowProfileErrors[keyof ShowProfileErrors];

export type ShowProfileResponses = {
    /**
     * The current profile details
     */
    200: ProfileReadable;
};

export type ShowProfileResponse = ShowProfileResponses[keyof ShowProfileResponses];

export type UpdateProfileData = {
    /**
     * The profile data to update
     */
    body: UpdateProfileBody;
    path?: never;
    query?: never;
    url: '/profile/self';
};

export type UpdateProfileErrors = {
    /**
     * Failed to parse request
     */
    400: Notification;
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Failed to validate request
     */
    422: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type UpdateProfileError = UpdateProfileErrors[keyof UpdateProfileErrors];

export type UpdateProfileResponses = {
    /**
     * The current profile details
     */
    200: ProfileReadable;
};

export type UpdateProfileResponse = UpdateProfileResponses[keyof UpdateProfileResponses];

export type ListGroupsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search query
         */
        search?: string;
        /**
         * Sorting column
         */
        sort?: string;
        /**
         * Sorting order
         */
        order?: 'asc' | 'desc';
        /**
         * Paging limit
         */
        limit?: number;
        /**
         * Paging offset
         */
        offset?: number;
    };
    url: '/groups';
};

export type ListGroupsErrors = {
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type ListGroupsError = ListGroupsErrors[keyof ListGroupsErrors];

export type ListGroupsResponses = {
    /**
     * A collection of groups
     */
    200: {
        total: number;
        limit: number;
        offset: number;
        groups: Array<GroupReadable>;
    };
};

export type ListGroupsResponse = ListGroupsResponses[keyof ListGroupsResponses];

export type CreateGroupData = {
    /**
     * The group data to create
     */
    body: CreateGroupBody;
    path?: never;
    query?: never;
    url: '/groups';
};

export type CreateGroupErrors = {
    /**
     * Failed to parse request
     */
    400: Notification;
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Failed to validate request
     */
    422: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type CreateGroupError = CreateGroupErrors[keyof CreateGroupErrors];

export type CreateGroupResponses = {
    /**
     * The details for a group
     */
    200: GroupReadable;
};

export type CreateGroupResponse = CreateGroupResponses[keyof CreateGroupResponses];

export type DeleteGroupData = {
    body?: never;
    path: {
        /**
         * A group identifier or slug
         */
        group_id: string;
    };
    query?: never;
    url: '/groups/{group_id}';
};

export type DeleteGroupErrors = {
    /**
     * Failed to execute action for resource
     */
    400: Notification;
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Resource not found
     */
    404: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type DeleteGroupError = DeleteGroupErrors[keyof DeleteGroupErrors];

export type DeleteGroupResponses = {
    /**
     * Plain success message
     */
    200: Notification;
};

export type DeleteGroupResponse = DeleteGroupResponses[keyof DeleteGroupResponses];

export type ShowGroupData = {
    body?: never;
    path: {
        /**
         * A group identifier or slug
         */
        group_id: string;
    };
    query?: never;
    url: '/groups/{group_id}';
};

export type ShowGroupErrors = {
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Resource not found
     */
    404: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type ShowGroupError = ShowGroupErrors[keyof ShowGroupErrors];

export type ShowGroupResponses = {
    /**
     * The details for a group
     */
    200: GroupReadable;
};

export type ShowGroupResponse = ShowGroupResponses[keyof ShowGroupResponses];

export type UpdateGroupData = {
    /**
     * The group data to update
     */
    body: UpdateGroupBody;
    path: {
        /**
         * A group identifier or slug
         */
        group_id: string;
    };
    query?: never;
    url: '/groups/{group_id}';
};

export type UpdateGroupErrors = {
    /**
     * Failed to parse request
     */
    400: Notification;
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Resource not found
     */
    404: Notification;
    /**
     * Failed to validate request
     */
    422: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type UpdateGroupError = UpdateGroupErrors[keyof UpdateGroupErrors];

export type UpdateGroupResponses = {
    /**
     * The details for a group
     */
    200: GroupReadable;
};

export type UpdateGroupResponse = UpdateGroupResponses[keyof UpdateGroupResponses];

export type DeleteGroupFromUserData = {
    /**
     * The group user data to unlink
     */
    body: GroupUserDropBody;
    path: {
        /**
         * A group identifier or slug
         */
        group_id: string;
    };
    query?: never;
    url: '/groups/{group_id}/users';
};

export type DeleteGroupFromUserErrors = {
    /**
     * Failed to parse request
     */
    400: Notification;
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Resource not found
     */
    404: Notification;
    /**
     * Resource is not attached
     */
    412: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type DeleteGroupFromUserError = DeleteGroupFromUserErrors[keyof DeleteGroupFromUserErrors];

export type DeleteGroupFromUserResponses = {
    /**
     * Plain success message
     */
    200: Notification;
};

export type DeleteGroupFromUserResponse = DeleteGroupFromUserResponses[keyof DeleteGroupFromUserResponses];

export type ListGroupUsersData = {
    body?: never;
    path: {
        /**
         * A group identifier or slug
         */
        group_id: string;
    };
    query?: {
        /**
         * Search query
         */
        search?: string;
        /**
         * Sorting column
         */
        sort?: string;
        /**
         * Sorting order
         */
        order?: 'asc' | 'desc';
        /**
         * Paging limit
         */
        limit?: number;
        /**
         * Paging offset
         */
        offset?: number;
    };
    url: '/groups/{group_id}/users';
};

export type ListGroupUsersErrors = {
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Resource not found
     */
    404: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type ListGroupUsersError = ListGroupUsersErrors[keyof ListGroupUsersErrors];

export type ListGroupUsersResponses = {
    /**
     * A collection of group users
     */
    200: {
        total: number;
        limit: number;
        offset: number;
        group?: GroupReadable;
        users: Array<UserGroupReadable>;
    };
};

export type ListGroupUsersResponse = ListGroupUsersResponses[keyof ListGroupUsersResponses];

export type AttachGroupToUserData = {
    /**
     * The group user data to permit
     */
    body: GroupUserPermBody;
    path: {
        /**
         * A group identifier or slug
         */
        group_id: string;
    };
    query?: never;
    url: '/groups/{group_id}/users';
};

export type AttachGroupToUserErrors = {
    /**
     * Failed to parse request
     */
    400: Notification;
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Resource not found
     */
    404: Notification;
    /**
     * Resource is already attached
     */
    412: Notification;
    /**
     * Failed to validate request
     */
    422: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type AttachGroupToUserError = AttachGroupToUserErrors[keyof AttachGroupToUserErrors];

export type AttachGroupToUserResponses = {
    /**
     * Plain success message
     */
    200: Notification;
};

export type AttachGroupToUserResponse = AttachGroupToUserResponses[keyof AttachGroupToUserResponses];

export type PermitGroupUserData = {
    /**
     * The group user data to permit
     */
    body: GroupUserPermBody;
    path: {
        /**
         * A group identifier or slug
         */
        group_id: string;
    };
    query?: never;
    url: '/groups/{group_id}/users';
};

export type PermitGroupUserErrors = {
    /**
     * Failed to parse request
     */
    400: Notification;
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Resource not found
     */
    404: Notification;
    /**
     * Resource is not attached
     */
    412: Notification;
    /**
     * Failed to validate request
     */
    422: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type PermitGroupUserError = PermitGroupUserErrors[keyof PermitGroupUserErrors];

export type PermitGroupUserResponses = {
    /**
     * Plain success message
     */
    200: Notification;
};

export type PermitGroupUserResponse = PermitGroupUserResponses[keyof PermitGroupUserResponses];

export type ListUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search query
         */
        search?: string;
        /**
         * Sorting column
         */
        sort?: string;
        /**
         * Sorting order
         */
        order?: 'asc' | 'desc';
        /**
         * Paging limit
         */
        limit?: number;
        /**
         * Paging offset
         */
        offset?: number;
    };
    url: '/users';
};

export type ListUsersErrors = {
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type ListUsersError = ListUsersErrors[keyof ListUsersErrors];

export type ListUsersResponses = {
    /**
     * A collection of users
     */
    200: {
        total: number;
        limit: number;
        offset: number;
        users: Array<UserReadable>;
    };
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type CreateUserData = {
    /**
     * The user data to create
     */
    body: CreateUserBody;
    path?: never;
    query?: never;
    url: '/users';
};

export type CreateUserErrors = {
    /**
     * Failed to parse request
     */
    400: Notification;
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Failed to validate request
     */
    422: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * The details for an user
     */
    200: UserReadable;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type DeleteUserData = {
    body?: never;
    path: {
        /**
         * A user identifier or slug
         */
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type DeleteUserErrors = {
    /**
     * Failed to execute action for resource
     */
    400: Notification;
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Resource not found
     */
    404: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
    /**
     * Plain success message
     */
    200: Notification;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type ShowUserData = {
    body?: never;
    path: {
        /**
         * A user identifier or slug
         */
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type ShowUserErrors = {
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Resource not found
     */
    404: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type ShowUserError = ShowUserErrors[keyof ShowUserErrors];

export type ShowUserResponses = {
    /**
     * The details for an user
     */
    200: UserReadable;
};

export type ShowUserResponse = ShowUserResponses[keyof ShowUserResponses];

export type UpdateUserData = {
    /**
     * The user data to update
     */
    body: UpdateUserBody;
    path: {
        /**
         * A user identifier or slug
         */
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}';
};

export type UpdateUserErrors = {
    /**
     * Failed to parse request
     */
    400: Notification;
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Resource not found
     */
    404: Notification;
    /**
     * Failed to validate request
     */
    422: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
    /**
     * The details for an user
     */
    200: UserReadable;
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type DeleteUserFromGroupData = {
    /**
     * The user group data to unlink
     */
    body: UserGroupDropBody;
    path: {
        /**
         * A user identifier or slug
         */
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}/groups';
};

export type DeleteUserFromGroupErrors = {
    /**
     * Failed to parse request
     */
    400: Notification;
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Resource not found
     */
    404: Notification;
    /**
     * Resource is not attached
     */
    412: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type DeleteUserFromGroupError = DeleteUserFromGroupErrors[keyof DeleteUserFromGroupErrors];

export type DeleteUserFromGroupResponses = {
    /**
     * Plain success message
     */
    200: Notification;
};

export type DeleteUserFromGroupResponse = DeleteUserFromGroupResponses[keyof DeleteUserFromGroupResponses];

export type ListUserGroupsData = {
    body?: never;
    path: {
        /**
         * A user identifier or slug
         */
        user_id: string;
    };
    query?: {
        /**
         * Search query
         */
        search?: string;
        /**
         * Sorting column
         */
        sort?: string;
        /**
         * Sorting order
         */
        order?: 'asc' | 'desc';
        /**
         * Paging limit
         */
        limit?: number;
        /**
         * Paging offset
         */
        offset?: number;
    };
    url: '/users/{user_id}/groups';
};

export type ListUserGroupsErrors = {
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Resource not found
     */
    404: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type ListUserGroupsError = ListUserGroupsErrors[keyof ListUserGroupsErrors];

export type ListUserGroupsResponses = {
    /**
     * A collection of user groups
     */
    200: {
        total: number;
        limit: number;
        offset: number;
        user?: UserReadable;
        groups: Array<UserGroupReadable>;
    };
};

export type ListUserGroupsResponse = ListUserGroupsResponses[keyof ListUserGroupsResponses];

export type AttachUserToGroupData = {
    /**
     * The user group data to permit
     */
    body: UserGroupPermBody;
    path: {
        /**
         * A user identifier or slug
         */
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}/groups';
};

export type AttachUserToGroupErrors = {
    /**
     * Failed to parse request
     */
    400: Notification;
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Resource not found
     */
    404: Notification;
    /**
     * Resource is already attached
     */
    412: Notification;
    /**
     * Failed to validate request
     */
    422: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type AttachUserToGroupError = AttachUserToGroupErrors[keyof AttachUserToGroupErrors];

export type AttachUserToGroupResponses = {
    /**
     * Plain success message
     */
    200: Notification;
};

export type AttachUserToGroupResponse = AttachUserToGroupResponses[keyof AttachUserToGroupResponses];

export type PermitUserGroupData = {
    /**
     * The user group data to permit
     */
    body: UserGroupPermBody;
    path: {
        /**
         * A user identifier or slug
         */
        user_id: string;
    };
    query?: never;
    url: '/users/{user_id}/groups';
};

export type PermitUserGroupErrors = {
    /**
     * Failed to parse request
     */
    400: Notification;
    /**
     * User is not authorized
     */
    403: Notification;
    /**
     * Resource not found
     */
    404: Notification;
    /**
     * Resource is not attached
     */
    412: Notification;
    /**
     * Failed to validate request
     */
    422: Notification;
    /**
     * Some internal server error
     */
    500: Notification;
};

export type PermitUserGroupError = PermitUserGroupErrors[keyof PermitUserGroupErrors];

export type PermitUserGroupResponses = {
    /**
     * Plain success message
     */
    200: Notification;
};

export type PermitUserGroupResponse = PermitUserGroupResponses[keyof PermitUserGroupResponses];

export type ClientOptions = {
    baseUrl: 'https://try.gopad.eu/api/v1' | (string & {});
};