// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { RequestProviderData, RequestProviderErrors, CallbackProviderData, CallbackProviderErrors, ListProvidersData, ListProvidersResponses, RedirectAuthData, RedirectAuthResponses, RedirectAuthErrors, LoginAuthData, LoginAuthResponses, LoginAuthErrors, RefreshAuthData, RefreshAuthResponses, RefreshAuthErrors, VerifyAuthData, VerifyAuthResponses, VerifyAuthErrors, TokenProfileData, TokenProfileResponses, TokenProfileErrors, ShowProfileData, ShowProfileResponses, ShowProfileErrors, UpdateProfileData, UpdateProfileResponses, UpdateProfileErrors, ListGroupsData, ListGroupsResponses, ListGroupsErrors, CreateGroupData, CreateGroupResponses, CreateGroupErrors, DeleteGroupData, DeleteGroupResponses, DeleteGroupErrors, ShowGroupData, ShowGroupResponses, ShowGroupErrors, UpdateGroupData, UpdateGroupResponses, UpdateGroupErrors, DeleteGroupFromUserData, DeleteGroupFromUserResponses, DeleteGroupFromUserErrors, ListGroupUsersData, ListGroupUsersResponses, ListGroupUsersErrors, AttachGroupToUserData, AttachGroupToUserResponses, AttachGroupToUserErrors, PermitGroupUserData, PermitGroupUserResponses, PermitGroupUserErrors, ListUsersData, ListUsersResponses, ListUsersErrors, CreateUserData, CreateUserResponses, CreateUserErrors, DeleteUserData, DeleteUserResponses, DeleteUserErrors, ShowUserData, ShowUserResponses, ShowUserErrors, UpdateUserData, UpdateUserResponses, UpdateUserErrors, DeleteUserFromGroupData, DeleteUserFromGroupResponses, DeleteUserFromGroupErrors, ListUserGroupsData, ListUserGroupsResponses, ListUserGroupsErrors, AttachUserToGroupData, AttachUserToGroupResponses, AttachUserToGroupErrors, PermitUserGroupData, PermitUserGroupResponses, PermitUserGroupErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Request the redirect to defined provider
 */
export const requestProvider = <ThrowOnError extends boolean = false>(options: Options<RequestProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, RequestProviderErrors, ThrowOnError>({
        url: '/auth/{provider}/request',
        ...options
    });
};

/**
 * Callback to parse the defined provider
 */
export const callbackProvider = <ThrowOnError extends boolean = false>(options: Options<CallbackProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, CallbackProviderErrors, ThrowOnError>({
        url: '/auth/{provider}/callback',
        ...options
    });
};

/**
 * Fetch the available auth providers
 */
export const listProviders = <ThrowOnError extends boolean = false>(options?: Options<ListProvidersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListProvidersResponses, unknown, ThrowOnError>({
        url: '/auth/providers',
        ...options
    });
};

/**
 * Retrieve real token after redirect
 */
export const redirectAuth = <ThrowOnError extends boolean = false>(options: Options<RedirectAuthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RedirectAuthResponses, RedirectAuthErrors, ThrowOnError>({
        url: '/auth/redirect',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Authenticate an user by credentials
 */
export const loginAuth = <ThrowOnError extends boolean = false>(options: Options<LoginAuthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginAuthResponses, LoginAuthErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh an auth token before it expires
 */
export const refreshAuth = <ThrowOnError extends boolean = false>(options?: Options<RefreshAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RefreshAuthResponses, RefreshAuthErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/auth/refresh',
        ...options
    });
};

/**
 * Verify validity for an authentication token
 */
export const verifyAuth = <ThrowOnError extends boolean = false>(options?: Options<VerifyAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VerifyAuthResponses, VerifyAuthErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/auth/verify',
        ...options
    });
};

/**
 * Retrieve an unlimited auth token
 */
export const tokenProfile = <ThrowOnError extends boolean = false>(options?: Options<TokenProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TokenProfileResponses, TokenProfileErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/profile/token',
        ...options
    });
};

/**
 * Fetch profile details of the personal account
 */
export const showProfile = <ThrowOnError extends boolean = false>(options?: Options<ShowProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ShowProfileResponses, ShowProfileErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/profile/self',
        ...options
    });
};

/**
 * Update your own profile information
 */
export const updateProfile = <ThrowOnError extends boolean = false>(options: Options<UpdateProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProfileResponses, UpdateProfileErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/profile/self',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all available groups
 */
export const listGroups = <ThrowOnError extends boolean = false>(options?: Options<ListGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListGroupsResponses, ListGroupsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups',
        ...options
    });
};

/**
 * Create a new group
 */
export const createGroup = <ThrowOnError extends boolean = false>(options: Options<CreateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateGroupResponses, CreateGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific group
 */
export const deleteGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGroupResponses, DeleteGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}',
        ...options
    });
};

/**
 * Fetch a specific group
 */
export const showGroup = <ThrowOnError extends boolean = false>(options: Options<ShowGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowGroupResponses, ShowGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}',
        ...options
    });
};

/**
 * Update a specific group
 */
export const updateGroup = <ThrowOnError extends boolean = false>(options: Options<UpdateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateGroupResponses, UpdateGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a user from group
 */
export const deleteGroupFromUser = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupFromUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGroupFromUserResponses, DeleteGroupFromUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all users attached to group
 */
export const listGroupUsers = <ThrowOnError extends boolean = false>(options: Options<ListGroupUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGroupUsersResponses, ListGroupUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/users',
        ...options
    });
};

/**
 * Attach a user to group
 */
export const attachGroupToUser = <ThrowOnError extends boolean = false>(options: Options<AttachGroupToUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachGroupToUserResponses, AttachGroupToUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update user perms for group
 */
export const permitGroupUser = <ThrowOnError extends boolean = false>(options: Options<PermitGroupUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitGroupUserResponses, PermitGroupUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{group_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all available users
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUsersResponses, ListUsersErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Create a new user
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponses, CreateUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a specific user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponses, DeleteUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Fetch a specific user
 */
export const showUser = <ThrowOnError extends boolean = false>(options: Options<ShowUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowUserResponses, ShowUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options
    });
};

/**
 * Update a specific user
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserResponses, UpdateUserErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unlink a group from user
 */
export const deleteUserFromGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteUserFromGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserFromGroupResponses, DeleteUserFromGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all groups attached to user
 */
export const listUserGroups = <ThrowOnError extends boolean = false>(options: Options<ListUserGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListUserGroupsResponses, ListUserGroupsErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/groups',
        ...options
    });
};

/**
 * Attach a group to user
 */
export const attachUserToGroup = <ThrowOnError extends boolean = false>(options: Options<AttachUserToGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AttachUserToGroupResponses, AttachUserToGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update group perms for user
 */
export const permitUserGroup = <ThrowOnError extends boolean = false>(options: Options<PermitUserGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PermitUserGroupResponses, PermitUserGroupErrors, ThrowOnError>({
        security: [
            {
                name: 'X-API-Key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{user_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};