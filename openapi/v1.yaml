---
openapi: "3.0.0"

info:
  version: "1.0.0-alpha1"
  description: "API definition for Gopad, Etherpad for markdown with Go"
  title: "Gopad OpenAPI"
  contact:
    name: "Gopad"
    email: "gopad@webhippie.de"
    url: "https://gopad.eu"
  license:
    name: "Apache-2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

servers:
  - url: "https://try.gopad.eu/api/v1"

security:
  - Header: []
  - Bearer: []
  - Basic: []

paths:
  /auth/{provider}/request:
    get:
      summary: "Request the redirect to defined provider"
      operationId: "RequestProvider"
      tags:
        - "auth"
      parameters:
        - $ref: "#/components/parameters/AuthProviderParam"
      security: []
      responses:
        "308":
          description: "Redirect to the provider"
          content:
            text/html:
              schema:
                type: "string"
        "404":
          description: "Provider not found"
          content:
            text/html:
              schema:
                type: "string"
        "500":
          description: "Internal server error"
          content:
            text/html:
              schema:
                type: "string"

  /auth/{provider}/callback:
    get:
      summary: "Callback to parse the defined provider"
      operationId: "CallbackProvider"
      tags:
        - "auth"
      parameters:
        - $ref: "#/components/parameters/AuthProviderParam"
        - $ref: "#/components/parameters/AuthStateParam"
        - $ref: "#/components/parameters/AuthCodeParam"
      security: []
      responses:
        "308":
          description: "Generated expiring token"
          content:
            text/html:
              schema:
                type: "string"
        "412":
          description: "Failed to initialize provider"
          content:
            text/html:
              schema:
                type: "string"
        "404":
          description: "Provider not found"
          content:
            text/html:
              schema:
                type: "string"
        "500":
          description: "Internal server error"
          content:
            text/html:
              schema:
                type: "string"

  /auth/providers:
    get:
      summary: "Fetch the available auth providers"
      operationId: "ListProviders"
      tags:
        - "auth"
      security: []
      responses:
        "200":
          $ref: "#/components/responses/ProvidersResponse"

  /auth/redirect:
    post:
      summary: "Retrieve real token after redirect"
      operationId: "RedirectAuth"
      tags:
        - "auth"
      requestBody:
        $ref: "#/components/requestBodies/RedirectAuthBody"
      security: []
      responses:
        "200":
          $ref: "#/components/responses/TokenResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/InvalidTokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/login:
    post:
      summary: "Authenticate an user by credentials"
      operationId: "LoginAuth"
      tags:
        - "auth"
      requestBody:
        $ref: "#/components/requestBodies/LoginAuthBody"
      security: []
      responses:
        "200":
          $ref: "#/components/responses/LoginResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/BadCredentialsError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/refresh:
    get:
      summary: "Refresh an auth token before it expires"
      operationId: "RefreshAuth"
      tags:
        - "auth"
      responses:
        "200":
          $ref: "#/components/responses/RefreshResponse"
        "401":
          $ref: "#/components/responses/InvalidTokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/verify:
    get:
      summary: "Verify validity for an authentication token"
      operationId: "VerifyAuth"
      tags:
        - "auth"
      responses:
        "200":
          $ref: "#/components/responses/VerifyResponse"
        "401":
          $ref: "#/components/responses/InvalidTokenError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /profile/token:
    get:
      summary: "Retrieve an unlimited auth token"
      operationId: "TokenProfile"
      tags:
        - "profile"
      responses:
        "200":
          $ref: "#/components/responses/TokenResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /profile/self:
    get:
      summary: "Fetch profile details of the personal account"
      operationId: "ShowProfile"
      tags:
        - "profile"
      responses:
        "200":
          $ref: "#/components/responses/ProfileResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update your own profile information"
      operationId: "UpdateProfile"
      tags:
        - "profile"
      requestBody:
        $ref: "#/components/requestBodies/UpdateProfileBody"
      responses:
        "200":
          $ref: "#/components/responses/ProfileResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups:
    get:
      summary: "Fetch all available groups"
      operationId: "ListGroups"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/GroupsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new group"
      operationId: "CreateGroup"
      tags:
        - "group"
      requestBody:
        $ref: "#/components/requestBodies/CreateGroupBody"
      responses:
        "200":
          $ref: "#/components/responses/GroupResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups/{group_id}:
    get:
      summary: "Fetch a specific group"
      operationId: "ShowGroup"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      responses:
        "200":
          $ref: "#/components/responses/GroupResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific group"
      operationId: "UpdateGroup"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateGroupBody"
      responses:
        "200":
          $ref: "#/components/responses/GroupResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific group"
      operationId: "DeleteGroup"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /groups/{group_id}/users:
    get:
      summary: "Fetch all users attached to group"
      operationId: "ListGroupUsers"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/GroupUsersResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a user to group"
      operationId: "AttachGroupToUser"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupUserPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update user perms for group"
      operationId: "PermitGroupUser"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupUserPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a user from group"
      operationId: "DeleteGroupFromUser"
      tags:
        - "group"
      parameters:
        - $ref: "#/components/parameters/GroupParam"
      requestBody:
        $ref: "#/components/requestBodies/GroupUserDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users:
    get:
      summary: "Fetch all available users"
      operationId: "ListUsers"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/UsersResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Create a new user"
      operationId: "CreateUser"
      tags:
        - "user"
      requestBody:
        $ref: "#/components/requestBodies/CreateUserBody"
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{user_id}:
    get:
      summary: "Fetch a specific user"
      operationId: "ShowUser"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update a specific user"
      operationId: "UpdateUser"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UpdateUserBody"
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Delete a specific user"
      operationId: "DeleteUser"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "400":
          $ref: "#/components/responses/ActionFailedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{user_id}/groups:
    get:
      summary: "Fetch all groups attached to user"
      operationId: "ListUserGroups"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SortColumnParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - $ref: "#/components/parameters/PagingLimitParam"
        - $ref: "#/components/parameters/PagingOffsetParam"
      responses:
        "200":
          $ref: "#/components/responses/UserGroupsResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: "Attach a group to user"
      operationId: "AttachUserToGroup"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserGroupPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/AlreadyAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: "Update group perms for user"
      operationId: "PermitUserGroup"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserGroupPermBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: "Unlink a group from user"
      operationId: "DeleteUserFromGroup"
      tags:
        - "user"
      parameters:
        - $ref: "#/components/parameters/UserParam"
      requestBody:
        $ref: "#/components/requestBodies/UserGroupDropBody"
      responses:
        "200":
          $ref: "#/components/responses/SuccessMessage"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "403":
          $ref: "#/components/responses/NotAuthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "412":
          $ref: "#/components/responses/NotAttachedError"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    Header:
      type: apiKey
      in: header
      name: X-API-Key
    Bearer:
      type: http
      scheme: bearer
    Basic:
      type: http
      scheme: basic

  parameters:
    SearchQueryParam:
      name: "search"
      in: "query"
      required: false
      schema:
        type: "string"
      description: "Search query"

    PagingLimitParam:
      name: "limit"
      in: "query"
      required: false
      schema:
        type: "integer"
        default: 100
      description: "Paging limit"
      x-example: 100
    PagingOffsetParam:
      name: "offset"
      in: "query"
      required: false
      schema:
        type: "integer"
        default: 0
      description: "Paging offset"
      x-example: 0

    SortColumnParam:
      name: "sort"
      in: "query"
      required: false
      schema:
        type: "string"
      description: "Sorting column"
    SortOrderParam:
      name: "order"
      in: "query"
      required: false
      schema:
        type: "string"
        default: "asc"
        enum:
          - "asc"
          - "desc"
      description: "Sorting order"
      x-example: "desc"

    AuthProviderParam:
      in: "path"
      name: "provider"
      description: "An identifier for the auth provider"
      schema:
        type: "string"
      required: true
      x-example: "github"
    AuthStateParam:
      name: "state"
      in: "query"
      required: false
      schema:
        type: "string"
      description: "Auth state"
    AuthCodeParam:
      name: "code"
      in: "query"
      required: false
      schema:
        type: "string"
      description: "Auth code"

    GroupParam:
      in: "path"
      name: "group_id"
      description: "A group identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "group-1"
      x-go-name: "GroupID"
    UserParam:
      in: "path"
      name: "user_id"
      description: "A user identifier or slug"
      schema:
        type: "string"
      required: true
      x-example: "jdoe"
      x-go-name: "UserID"

  requestBodies:
    RedirectAuthBody:
      description: "The redirect token to authenticate"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "token"
            properties:
              token:
                type: "string"

    LoginAuthBody:
      description: "The credentials to authenticate"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "username"
              - "password"
            properties:
              username:
                type: "string"
              password:
                type: "string"
                format: "password"

    UpdateProfileBody:
      description: "The profile data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                x-omitempty: true
                x-nullable: true
              password:
                type: "string"
                format: "password"
                x-omitempty: true
                x-nullable: true
              email:
                type: "string"
                x-omitempty: true
                x-nullable: true
              fullname:
                type: "string"
                x-omitempty: true
                x-nullable: true

    CreateGroupBody:
      description: "The group data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
    UpdateGroupBody:
      description: "The group data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              slug:
                type: "string"
                x-omitempty: true
                x-nullable: true
              name:
                type: "string"
                x-omitempty: true
                x-nullable: true
    GroupUserPermBody:
      description: "The group user data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "user"
              - "perm"
            properties:
              user:
                type: "string"
              perm:
                type: "string"
    GroupUserDropBody:
      description: "The group user data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "user"
            properties:
              user:
                type: "string"

    CreateUserBody:
      description: "The user data to create"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                x-omitempty: true
                x-nullable: true
              password:
                type: "string"
                format: "password"
                x-omitempty: true
                x-nullable: true
              email:
                type: "string"
                x-omitempty: true
                x-nullable: true
              fullname:
                type: "string"
                x-omitempty: true
                x-nullable: true
              admin:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
                default: false
              active:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
                default: true
    UpdateUserBody:
      description: "The user data to update"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                x-omitempty: true
                x-nullable: true
              password:
                type: "string"
                format: "password"
                x-omitempty: true
                x-nullable: true
              email:
                type: "string"
                x-omitempty: true
                x-nullable: true
              fullname:
                type: "string"
                x-omitempty: true
                x-nullable: true
              admin:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
              active:
                type: "boolean"
                x-omitempty: true
                x-nullable: true
    UserGroupPermBody:
      description: "The user group data to permit"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "group"
              - "perm"
            properties:
              group:
                type: "string"
              perm:
                type: "string"
    UserGroupDropBody:
      description: "The user group data to unlink"
      required: true
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "group"
            properties:
              group:
                type: "string"

  responses:
    BadRequestError:
      description: "Failed to parse request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    NotFoundError:
      description: "Resource not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    InternalServerError:
      description: "Some internal server error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    SuccessMessage:
      description: "Plain success message"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    ValidationError:
      description: "Failed to validate request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    NotAuthorizedError:
      description: "User is not authorized"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    AlreadyAttachedError:
      description: "Resource is already attached"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"
    NotAttachedError:
      description: "Resource is not attached"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    ActionFailedError:
      description: "Failed to execute action for resource"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    InvalidTokenError:
      description: "Failed to generate or validate token"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    BadCredentialsError:
      description: "Unauthorized with wrong credentials"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    GeneralError:
      description: "Some error unrelated to the handler"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Notification"

    ProvidersResponse:
      description: "A collection of auth providers"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "providers"
            properties:
              total:
                type: integer
                format: int64
              providers:
                type: "array"
                items:
                  $ref: "#/components/schemas/Provider"

    VerifyResponse:
      description: "Metadata of the auth token"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthVerify"
    LoginResponse:
      description: "Generated token with expire date"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthToken"
    RefreshResponse:
      description: "Refreshed token with expire date"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthToken"
    TokenResponse:
      description: "Generated token never expiring"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthToken"
    ProfileResponse:
      description: "The current profile details"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Profile"

    GroupsResponse:
      description: "A collection of groups"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "groups"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              groups:
                type: "array"
                items:
                  $ref: "#/components/schemas/Group"
    GroupResponse:
      description: "The details for a group"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Group"
    GroupUsersResponse:
      description: "A collection of group users"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "users"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              group:
                $ref: "#/components/schemas/Group"
                readOnly: true
              users:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserGroup"

    UsersResponse:
      description: "A collection of users"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "users"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              users:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
    UserResponse:
      description: "The details for an user"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    UserGroupsResponse:
      description: "A collection of user groups"
      content:
        application/json:
          schema:
            type: "object"
            required:
              - "total"
              - "limit"
              - "offset"
              - "groups"
            properties:
              total:
                type: integer
                format: int64
              limit:
                type: integer
                format: int64
              offset:
                type: integer
                format: int64
              user:
                $ref: "#/components/schemas/User"
                readOnly: true
              groups:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserGroup"

  schemas:
    AuthToken:
      type: "object"
      required:
        - "token"
      properties:
        token:
          type: "string"
          readOnly: true
        expires_at:
          type: "string"
          format: "date-time"
          x-omitempty: true
          x-nullable: true
          readOnly: true

    AuthVerify:
      type: "object"
      required:
        - "username"
      properties:
        username:
          type: "string"
          readOnly: true
        created_at:
          type: "string"
          format: "date-time"
          x-omitempty: true
          x-nullable: true
          readOnly: true

    Profile:
      title: "Profile"
      description: "Model to represent profile"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        username:
          type: "string"
          x-omitempty: true
          x-nullable: true
        password:
          type: "string"
          format: "password"
          x-omitempty: true
          x-nullable: true
        email:
          type: "string"
          x-omitempty: true
          x-nullable: true
        fullname:
          type: "string"
          x-omitempty: true
          x-nullable: true
        profile:
          type: "string"
          x-omitempty: true
          x-nullable: true
        admin:
          type: "boolean"
          readOnly: true
        active:
          type: "boolean"
          readOnly: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true
        auths:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/UserAuth"
        groups:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/UserGroup"

    Group:
      title: "Group"
      description: "Model to represent group"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        slug:
          type: "string"
          x-omitempty: true
          x-nullable: true
        name:
          type: "string"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    User:
      title: "User"
      description: "Model to represent user"
      type: "object"
      properties:
        id:
          type: "string"
          x-go-name: "ID"
        username:
          type: "string"
          x-omitempty: true
          x-nullable: true
        password:
          type: "string"
          format: "password"
          x-omitempty: true
          x-nullable: true
        email:
          type: "string"
          x-omitempty: true
          x-nullable: true
        fullname:
          type: "string"
          x-omitempty: true
          x-nullable: true
        profile:
          type: "string"
          x-omitempty: true
          x-nullable: true
        admin:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        active:
          type: "boolean"
          x-omitempty: true
          x-nullable: true
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true
        auths:
          type: "array"
          x-omitempty: true
          x-nullable: true
          readOnly: true
          items:
            $ref: "#/components/schemas/UserAuth"

    UserAuth:
      title: "User Auth"
      description: "Model to represent user auth"
      type: "object"
      properties:
        provider:
          type: "string"
        ref:
          type: "string"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    UserGroup:
      title: "User Group"
      description: "Model to represent user group"
      type: "object"
      required:
        - "user_id"
        - "group_id"
      properties:
        user_id:
          type: "string"
          x-go-name: "UserID"
        user:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/User"
        group_id:
          type: "string"
          x-go-name: "GroupID"
        group:
          x-omitempty: true
          x-nullable: true
          readOnly: true
          $ref: "#/components/schemas/Group"
        perm:
          type: "string"
          default: "user"
          enum:
            - "owner"
            - "user"
            - "admin"
        created_at:
          type: "string"
          format: "date-time"
          readOnly: true
        updated_at:
          type: "string"
          format: "date-time"
          readOnly: true

    Provider:
      title: "Provider"
      description: "Model to represent auth provider"
      type: "object"
      properties:
        name:
          type: "string"
          readOnly: true
        driver:
          type: "string"
          readOnly: true
        display:
          type: "string"
          readOnly: true
        icon:
          type: "string"
          readOnly: true

    Notification:
      title: "Notification"
      description: "Generic response for errors and validations"
      type: "object"
      properties:
        status:
          type: "integer"
          x-omitempty: true
        message:
          type: "string"
          x-omitempty: true
        errors:
          type: "array"
          items:
            $ref: "#/components/schemas/Validation"

    Validation:
      title: "Validation"
      description: "General structure to show validation errors"
      type: "object"
      properties:
        field:
          type: "string"
        message:
          type: "string"

...
