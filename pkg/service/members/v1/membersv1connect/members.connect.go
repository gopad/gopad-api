// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: members/v1/members.proto

package membersv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/gopad/gopad-api/pkg/service/members/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MembersServiceName is the fully-qualified name of the MembersService service.
	MembersServiceName = "members.v1.MembersService"
)

// MembersServiceClient is a client for the members.v1.MembersService service.
type MembersServiceClient interface {
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
	Append(context.Context, *connect_go.Request[v1.AppendRequest]) (*connect_go.Response[v1.AppendResponse], error)
	Drop(context.Context, *connect_go.Request[v1.DropRequest]) (*connect_go.Response[v1.DropResponse], error)
}

// NewMembersServiceClient constructs a client for the members.v1.MembersService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMembersServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MembersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &membersServiceClient{
		list: connect_go.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+"/members.v1.MembersService/List",
			opts...,
		),
		append: connect_go.NewClient[v1.AppendRequest, v1.AppendResponse](
			httpClient,
			baseURL+"/members.v1.MembersService/Append",
			opts...,
		),
		drop: connect_go.NewClient[v1.DropRequest, v1.DropResponse](
			httpClient,
			baseURL+"/members.v1.MembersService/Drop",
			opts...,
		),
	}
}

// membersServiceClient implements MembersServiceClient.
type membersServiceClient struct {
	list   *connect_go.Client[v1.ListRequest, v1.ListResponse]
	append *connect_go.Client[v1.AppendRequest, v1.AppendResponse]
	drop   *connect_go.Client[v1.DropRequest, v1.DropResponse]
}

// List calls members.v1.MembersService.List.
func (c *membersServiceClient) List(ctx context.Context, req *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Append calls members.v1.MembersService.Append.
func (c *membersServiceClient) Append(ctx context.Context, req *connect_go.Request[v1.AppendRequest]) (*connect_go.Response[v1.AppendResponse], error) {
	return c.append.CallUnary(ctx, req)
}

// Drop calls members.v1.MembersService.Drop.
func (c *membersServiceClient) Drop(ctx context.Context, req *connect_go.Request[v1.DropRequest]) (*connect_go.Response[v1.DropResponse], error) {
	return c.drop.CallUnary(ctx, req)
}

// MembersServiceHandler is an implementation of the members.v1.MembersService service.
type MembersServiceHandler interface {
	List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error)
	Append(context.Context, *connect_go.Request[v1.AppendRequest]) (*connect_go.Response[v1.AppendResponse], error)
	Drop(context.Context, *connect_go.Request[v1.DropRequest]) (*connect_go.Response[v1.DropResponse], error)
}

// NewMembersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMembersServiceHandler(svc MembersServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/members.v1.MembersService/List", connect_go.NewUnaryHandler(
		"/members.v1.MembersService/List",
		svc.List,
		opts...,
	))
	mux.Handle("/members.v1.MembersService/Append", connect_go.NewUnaryHandler(
		"/members.v1.MembersService/Append",
		svc.Append,
		opts...,
	))
	mux.Handle("/members.v1.MembersService/Drop", connect_go.NewUnaryHandler(
		"/members.v1.MembersService/Drop",
		svc.Drop,
		opts...,
	))
	return "/members.v1.MembersService/", mux
}

// UnimplementedMembersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMembersServiceHandler struct{}

func (UnimplementedMembersServiceHandler) List(context.Context, *connect_go.Request[v1.ListRequest]) (*connect_go.Response[v1.ListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("members.v1.MembersService.List is not implemented"))
}

func (UnimplementedMembersServiceHandler) Append(context.Context, *connect_go.Request[v1.AppendRequest]) (*connect_go.Response[v1.AppendResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("members.v1.MembersService.Append is not implemented"))
}

func (UnimplementedMembersServiceHandler) Drop(context.Context, *connect_go.Request[v1.DropRequest]) (*connect_go.Response[v1.DropResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("members.v1.MembersService.Drop is not implemented"))
}
