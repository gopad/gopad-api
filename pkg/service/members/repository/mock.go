// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/members/repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/gopad/gopad-api/pkg/model"
)

// MockMembersRepository is a mock of MembersRepository interface.
type MockMembersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMembersRepositoryMockRecorder
}

// MockMembersRepositoryMockRecorder is the mock recorder for MockMembersRepository.
type MockMembersRepositoryMockRecorder struct {
	mock *MockMembersRepository
}

// NewMockMembersRepository creates a new mock instance.
func NewMockMembersRepository(ctrl *gomock.Controller) *MockMembersRepository {
	mock := &MockMembersRepository{ctrl: ctrl}
	mock.recorder = &MockMembersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMembersRepository) EXPECT() *MockMembersRepositoryMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockMembersRepository) Append(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockMembersRepositoryMockRecorder) Append(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockMembersRepository)(nil).Append), arg0, arg1, arg2)
}

// Drop mocks base method.
func (m *MockMembersRepository) Drop(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop.
func (mr *MockMembersRepositoryMockRecorder) Drop(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockMembersRepository)(nil).Drop), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockMembersRepository) List(arg0 context.Context, arg1, arg2 string) ([]*model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMembersRepositoryMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMembersRepository)(nil).List), arg0, arg1, arg2)
}
