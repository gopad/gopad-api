// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/gopad/gopad-api/pkg/api/v1/models"
	"github.com/gopad/gopad-api/pkg/api/v1/restapi/operations/auth"
	"github.com/gopad/gopad-api/pkg/api/v1/restapi/operations/profile"
	"github.com/gopad/gopad-api/pkg/api/v1/restapi/operations/team"
	"github.com/gopad/gopad-api/pkg/api/v1/restapi/operations/user"
)

// NewGopadAPI creates a new Gopad instance
func NewGopadAPI(spec *loads.Document) *GopadAPI {
	return &GopadAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		TeamAppendTeamToUserHandler: team.AppendTeamToUserHandlerFunc(func(params team.AppendTeamToUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.AppendTeamToUser has not yet been implemented")
		}),
		UserAppendUserToTeamHandler: user.AppendUserToTeamHandlerFunc(func(params user.AppendUserToTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.AppendUserToTeam has not yet been implemented")
		}),
		TeamCreateTeamHandler: team.CreateTeamHandlerFunc(func(params team.CreateTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.CreateTeam has not yet been implemented")
		}),
		UserCreateUserHandler: user.CreateUserHandlerFunc(func(params user.CreateUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.CreateUser has not yet been implemented")
		}),
		TeamDeleteTeamHandler: team.DeleteTeamHandlerFunc(func(params team.DeleteTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.DeleteTeam has not yet been implemented")
		}),
		TeamDeleteTeamFromUserHandler: team.DeleteTeamFromUserHandlerFunc(func(params team.DeleteTeamFromUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.DeleteTeamFromUser has not yet been implemented")
		}),
		UserDeleteUserHandler: user.DeleteUserHandlerFunc(func(params user.DeleteUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.DeleteUser has not yet been implemented")
		}),
		UserDeleteUserFromTeamHandler: user.DeleteUserFromTeamHandlerFunc(func(params user.DeleteUserFromTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.DeleteUserFromTeam has not yet been implemented")
		}),
		TeamListTeamUsersHandler: team.ListTeamUsersHandlerFunc(func(params team.ListTeamUsersParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.ListTeamUsers has not yet been implemented")
		}),
		TeamListTeamsHandler: team.ListTeamsHandlerFunc(func(params team.ListTeamsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.ListTeams has not yet been implemented")
		}),
		UserListUserTeamsHandler: user.ListUserTeamsHandlerFunc(func(params user.ListUserTeamsParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.ListUserTeams has not yet been implemented")
		}),
		UserListUsersHandler: user.ListUsersHandlerFunc(func(params user.ListUsersParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.ListUsers has not yet been implemented")
		}),
		AuthLoginUserHandler: auth.LoginUserHandlerFunc(func(params auth.LoginUserParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.LoginUser has not yet been implemented")
		}),
		TeamPermitTeamUserHandler: team.PermitTeamUserHandlerFunc(func(params team.PermitTeamUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.PermitTeamUser has not yet been implemented")
		}),
		UserPermitUserTeamHandler: user.PermitUserTeamHandlerFunc(func(params user.PermitUserTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.PermitUserTeam has not yet been implemented")
		}),
		AuthRefreshAuthHandler: auth.RefreshAuthHandlerFunc(func(params auth.RefreshAuthParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation auth.RefreshAuth has not yet been implemented")
		}),
		ProfileShowProfileHandler: profile.ShowProfileHandlerFunc(func(params profile.ShowProfileParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation profile.ShowProfile has not yet been implemented")
		}),
		TeamShowTeamHandler: team.ShowTeamHandlerFunc(func(params team.ShowTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.ShowTeam has not yet been implemented")
		}),
		UserShowUserHandler: user.ShowUserHandlerFunc(func(params user.ShowUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.ShowUser has not yet been implemented")
		}),
		ProfileTokenProfileHandler: profile.TokenProfileHandlerFunc(func(params profile.TokenProfileParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation profile.TokenProfile has not yet been implemented")
		}),
		ProfileUpdateProfileHandler: profile.UpdateProfileHandlerFunc(func(params profile.UpdateProfileParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation profile.UpdateProfile has not yet been implemented")
		}),
		TeamUpdateTeamHandler: team.UpdateTeamHandlerFunc(func(params team.UpdateTeamParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation team.UpdateTeam has not yet been implemented")
		}),
		UserUpdateUserHandler: user.UpdateUserHandlerFunc(func(params user.UpdateUserParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation user.UpdateUser has not yet been implemented")
		}),
		AuthVerifyAuthHandler: auth.VerifyAuthHandlerFunc(func(params auth.VerifyAuthParams, principal *models.User) middleware.Responder {
			return middleware.NotImplemented("operation auth.VerifyAuth has not yet been implemented")
		}),

		// Applies when the Authorization header is set with the Basic scheme
		BasicAuth: func(user string, pass string) (*models.User, error) {
			return nil, errors.NotImplemented("basic auth  (Basic) has not yet been implemented")
		},
		// Applies when the "X-API-Key" header is set
		HeaderAuth: func(token string) (*models.User, error) {
			return nil, errors.NotImplemented("api key auth (Header) X-API-Key from header param [X-API-Key] has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*GopadAPI API definition for Gopad */
type GopadAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// BasicAuth registers a function that takes username and password and returns a principal
	// it performs authentication with basic auth
	BasicAuth func(string, string) (*models.User, error)

	// HeaderAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key X-API-Key provided in the header
	HeaderAuth func(string) (*models.User, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// TeamAppendTeamToUserHandler sets the operation handler for the append team to user operation
	TeamAppendTeamToUserHandler team.AppendTeamToUserHandler
	// UserAppendUserToTeamHandler sets the operation handler for the append user to team operation
	UserAppendUserToTeamHandler user.AppendUserToTeamHandler
	// TeamCreateTeamHandler sets the operation handler for the create team operation
	TeamCreateTeamHandler team.CreateTeamHandler
	// UserCreateUserHandler sets the operation handler for the create user operation
	UserCreateUserHandler user.CreateUserHandler
	// TeamDeleteTeamHandler sets the operation handler for the delete team operation
	TeamDeleteTeamHandler team.DeleteTeamHandler
	// TeamDeleteTeamFromUserHandler sets the operation handler for the delete team from user operation
	TeamDeleteTeamFromUserHandler team.DeleteTeamFromUserHandler
	// UserDeleteUserHandler sets the operation handler for the delete user operation
	UserDeleteUserHandler user.DeleteUserHandler
	// UserDeleteUserFromTeamHandler sets the operation handler for the delete user from team operation
	UserDeleteUserFromTeamHandler user.DeleteUserFromTeamHandler
	// TeamListTeamUsersHandler sets the operation handler for the list team users operation
	TeamListTeamUsersHandler team.ListTeamUsersHandler
	// TeamListTeamsHandler sets the operation handler for the list teams operation
	TeamListTeamsHandler team.ListTeamsHandler
	// UserListUserTeamsHandler sets the operation handler for the list user teams operation
	UserListUserTeamsHandler user.ListUserTeamsHandler
	// UserListUsersHandler sets the operation handler for the list users operation
	UserListUsersHandler user.ListUsersHandler
	// AuthLoginUserHandler sets the operation handler for the login user operation
	AuthLoginUserHandler auth.LoginUserHandler
	// TeamPermitTeamUserHandler sets the operation handler for the permit team user operation
	TeamPermitTeamUserHandler team.PermitTeamUserHandler
	// UserPermitUserTeamHandler sets the operation handler for the permit user team operation
	UserPermitUserTeamHandler user.PermitUserTeamHandler
	// AuthRefreshAuthHandler sets the operation handler for the refresh auth operation
	AuthRefreshAuthHandler auth.RefreshAuthHandler
	// ProfileShowProfileHandler sets the operation handler for the show profile operation
	ProfileShowProfileHandler profile.ShowProfileHandler
	// TeamShowTeamHandler sets the operation handler for the show team operation
	TeamShowTeamHandler team.ShowTeamHandler
	// UserShowUserHandler sets the operation handler for the show user operation
	UserShowUserHandler user.ShowUserHandler
	// ProfileTokenProfileHandler sets the operation handler for the token profile operation
	ProfileTokenProfileHandler profile.TokenProfileHandler
	// ProfileUpdateProfileHandler sets the operation handler for the update profile operation
	ProfileUpdateProfileHandler profile.UpdateProfileHandler
	// TeamUpdateTeamHandler sets the operation handler for the update team operation
	TeamUpdateTeamHandler team.UpdateTeamHandler
	// UserUpdateUserHandler sets the operation handler for the update user operation
	UserUpdateUserHandler user.UpdateUserHandler
	// AuthVerifyAuthHandler sets the operation handler for the verify auth operation
	AuthVerifyAuthHandler auth.VerifyAuthHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *GopadAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *GopadAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *GopadAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *GopadAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *GopadAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *GopadAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *GopadAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *GopadAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *GopadAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the GopadAPI
func (o *GopadAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BasicAuth == nil {
		unregistered = append(unregistered, "BasicAuth")
	}
	if o.HeaderAuth == nil {
		unregistered = append(unregistered, "XAPIKeyAuth")
	}

	if o.TeamAppendTeamToUserHandler == nil {
		unregistered = append(unregistered, "team.AppendTeamToUserHandler")
	}
	if o.UserAppendUserToTeamHandler == nil {
		unregistered = append(unregistered, "user.AppendUserToTeamHandler")
	}
	if o.TeamCreateTeamHandler == nil {
		unregistered = append(unregistered, "team.CreateTeamHandler")
	}
	if o.UserCreateUserHandler == nil {
		unregistered = append(unregistered, "user.CreateUserHandler")
	}
	if o.TeamDeleteTeamHandler == nil {
		unregistered = append(unregistered, "team.DeleteTeamHandler")
	}
	if o.TeamDeleteTeamFromUserHandler == nil {
		unregistered = append(unregistered, "team.DeleteTeamFromUserHandler")
	}
	if o.UserDeleteUserHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserHandler")
	}
	if o.UserDeleteUserFromTeamHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserFromTeamHandler")
	}
	if o.TeamListTeamUsersHandler == nil {
		unregistered = append(unregistered, "team.ListTeamUsersHandler")
	}
	if o.TeamListTeamsHandler == nil {
		unregistered = append(unregistered, "team.ListTeamsHandler")
	}
	if o.UserListUserTeamsHandler == nil {
		unregistered = append(unregistered, "user.ListUserTeamsHandler")
	}
	if o.UserListUsersHandler == nil {
		unregistered = append(unregistered, "user.ListUsersHandler")
	}
	if o.AuthLoginUserHandler == nil {
		unregistered = append(unregistered, "auth.LoginUserHandler")
	}
	if o.TeamPermitTeamUserHandler == nil {
		unregistered = append(unregistered, "team.PermitTeamUserHandler")
	}
	if o.UserPermitUserTeamHandler == nil {
		unregistered = append(unregistered, "user.PermitUserTeamHandler")
	}
	if o.AuthRefreshAuthHandler == nil {
		unregistered = append(unregistered, "auth.RefreshAuthHandler")
	}
	if o.ProfileShowProfileHandler == nil {
		unregistered = append(unregistered, "profile.ShowProfileHandler")
	}
	if o.TeamShowTeamHandler == nil {
		unregistered = append(unregistered, "team.ShowTeamHandler")
	}
	if o.UserShowUserHandler == nil {
		unregistered = append(unregistered, "user.ShowUserHandler")
	}
	if o.ProfileTokenProfileHandler == nil {
		unregistered = append(unregistered, "profile.TokenProfileHandler")
	}
	if o.ProfileUpdateProfileHandler == nil {
		unregistered = append(unregistered, "profile.UpdateProfileHandler")
	}
	if o.TeamUpdateTeamHandler == nil {
		unregistered = append(unregistered, "team.UpdateTeamHandler")
	}
	if o.UserUpdateUserHandler == nil {
		unregistered = append(unregistered, "user.UpdateUserHandler")
	}
	if o.AuthVerifyAuthHandler == nil {
		unregistered = append(unregistered, "auth.VerifyAuthHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *GopadAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *GopadAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "Basic":
			result[name] = o.BasicAuthenticator(func(username, password string) (interface{}, error) {
				return o.BasicAuth(username, password)
			})

		case "Header":
			scheme := schemes[name]
			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, func(token string) (interface{}, error) {
				return o.HeaderAuth(token)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *GopadAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *GopadAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *GopadAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *GopadAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the gopad API
func (o *GopadAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *GopadAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/teams/{team_id}/users"] = team.NewAppendTeamToUser(o.context, o.TeamAppendTeamToUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/{user_id}/teams"] = user.NewAppendUserToTeam(o.context, o.UserAppendUserToTeamHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/teams"] = team.NewCreateTeam(o.context, o.TeamCreateTeamHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users"] = user.NewCreateUser(o.context, o.UserCreateUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{team_id}"] = team.NewDeleteTeam(o.context, o.TeamDeleteTeamHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/teams/{team_id}/users"] = team.NewDeleteTeamFromUser(o.context, o.TeamDeleteTeamFromUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{user_id}"] = user.NewDeleteUser(o.context, o.UserDeleteUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{user_id}/teams"] = user.NewDeleteUserFromTeam(o.context, o.UserDeleteUserFromTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{team_id}/users"] = team.NewListTeamUsers(o.context, o.TeamListTeamUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams"] = team.NewListTeams(o.context, o.TeamListTeamsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{user_id}/teams"] = user.NewListUserTeams(o.context, o.UserListUserTeamsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = user.NewListUsers(o.context, o.UserListUsersHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/auth/login"] = auth.NewLoginUser(o.context, o.AuthLoginUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{team_id}/users"] = team.NewPermitTeamUser(o.context, o.TeamPermitTeamUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{user_id}/teams"] = user.NewPermitUserTeam(o.context, o.UserPermitUserTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/refresh"] = auth.NewRefreshAuth(o.context, o.AuthRefreshAuthHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile/self"] = profile.NewShowProfile(o.context, o.ProfileShowProfileHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/teams/{team_id}"] = team.NewShowTeam(o.context, o.TeamShowTeamHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{user_id}"] = user.NewShowUser(o.context, o.UserShowUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profile/token"] = profile.NewTokenProfile(o.context, o.ProfileTokenProfileHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/profile/self"] = profile.NewUpdateProfile(o.context, o.ProfileUpdateProfileHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/teams/{team_id}"] = team.NewUpdateTeam(o.context, o.TeamUpdateTeamHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{user_id}"] = user.NewUpdateUser(o.context, o.UserUpdateUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/verify"] = auth.NewVerifyAuth(o.context, o.AuthVerifyAuthHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *GopadAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *GopadAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *GopadAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *GopadAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *GopadAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
