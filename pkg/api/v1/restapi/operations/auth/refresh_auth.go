// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RefreshAuthHandlerFunc turns a function with the right signature into a refresh auth handler
type RefreshAuthHandlerFunc func(RefreshAuthParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RefreshAuthHandlerFunc) Handle(params RefreshAuthParams) middleware.Responder {
	return fn(params)
}

// RefreshAuthHandler interface for that can handle valid refresh auth params
type RefreshAuthHandler interface {
	Handle(RefreshAuthParams) middleware.Responder
}

// NewRefreshAuth creates a new http.Handler for the refresh auth operation
func NewRefreshAuth(ctx *middleware.Context, handler RefreshAuthHandler) *RefreshAuth {
	return &RefreshAuth{Context: ctx, Handler: handler}
}

/*RefreshAuth swagger:route GET /auth/refresh auth refreshAuth

Refresh an auth token before it expires

*/
type RefreshAuth struct {
	Context *middleware.Context
	Handler RefreshAuthHandler
}

func (o *RefreshAuth) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRefreshAuthParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
