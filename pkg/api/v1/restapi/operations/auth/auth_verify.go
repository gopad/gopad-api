// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AuthVerifyHandlerFunc turns a function with the right signature into a auth verify handler
type AuthVerifyHandlerFunc func(AuthVerifyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AuthVerifyHandlerFunc) Handle(params AuthVerifyParams) middleware.Responder {
	return fn(params)
}

// AuthVerifyHandler interface for that can handle valid auth verify params
type AuthVerifyHandler interface {
	Handle(AuthVerifyParams) middleware.Responder
}

// NewAuthVerify creates a new http.Handler for the auth verify operation
func NewAuthVerify(ctx *middleware.Context, handler AuthVerifyHandler) *AuthVerify {
	return &AuthVerify{Context: ctx, Handler: handler}
}

/*AuthVerify swagger:route GET /auth/verify/{token} auth authVerify

Verify validity for an authentication token

*/
type AuthVerify struct {
	Context *middleware.Context
	Handler AuthVerifyHandler
}

func (o *AuthVerify) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAuthVerifyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
