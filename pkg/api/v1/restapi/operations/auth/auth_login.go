// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// AuthLoginHandlerFunc turns a function with the right signature into a auth login handler
type AuthLoginHandlerFunc func(AuthLoginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AuthLoginHandlerFunc) Handle(params AuthLoginParams) middleware.Responder {
	return fn(params)
}

// AuthLoginHandler interface for that can handle valid auth login params
type AuthLoginHandler interface {
	Handle(AuthLoginParams) middleware.Responder
}

// NewAuthLogin creates a new http.Handler for the auth login operation
func NewAuthLogin(ctx *middleware.Context, handler AuthLoginHandler) *AuthLogin {
	return &AuthLogin{Context: ctx, Handler: handler}
}

/*AuthLogin swagger:route POST /auth/login auth authLogin

Authenticate an user by credentials

*/
type AuthLogin struct {
	Context *middleware.Context
	Handler AuthLoginHandler
}

func (o *AuthLogin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAuthLoginParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AuthLoginBody auth login body
// swagger:model AuthLoginBody
type AuthLoginBody struct {

	// password
	// Required: true
	Password *string `json:"password"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this auth login body
func (o *AuthLoginBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AuthLoginBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("params"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

func (o *AuthLoginBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("params"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AuthLoginBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthLoginBody) UnmarshalBinary(b []byte) error {
	var res AuthLoginBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
