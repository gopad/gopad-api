// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/gopad/gopad-api/pkg/api/v1/models"
)

// PermitTeamUserHandlerFunc turns a function with the right signature into a permit team user handler
type PermitTeamUserHandlerFunc func(PermitTeamUserParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn PermitTeamUserHandlerFunc) Handle(params PermitTeamUserParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// PermitTeamUserHandler interface for that can handle valid permit team user params
type PermitTeamUserHandler interface {
	Handle(PermitTeamUserParams, *models.User) middleware.Responder
}

// NewPermitTeamUser creates a new http.Handler for the permit team user operation
func NewPermitTeamUser(ctx *middleware.Context, handler PermitTeamUserHandler) *PermitTeamUser {
	return &PermitTeamUser{Context: ctx, Handler: handler}
}

/*
	PermitTeamUser swagger:route PUT /teams/{team_id}/users team permitTeamUser

Update user perms for team
*/
type PermitTeamUser struct {
	Context *middleware.Context
	Handler PermitTeamUserHandler
}

func (o *PermitTeamUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPermitTeamUserParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
