// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/gopad/gopad-api/pkg/api/v1/models"
)

// TeamUpdateOKCode is the HTTP code returned for type TeamUpdateOK
const TeamUpdateOKCode int = 200

/*TeamUpdateOK The updated team details

swagger:response teamUpdateOK
*/
type TeamUpdateOK struct {

	/*
	  In: Body
	*/
	Payload *models.Team `json:"body,omitempty"`
}

// NewTeamUpdateOK creates TeamUpdateOK with default headers values
func NewTeamUpdateOK() *TeamUpdateOK {

	return &TeamUpdateOK{}
}

// WithPayload adds the payload to the team update o k response
func (o *TeamUpdateOK) WithPayload(payload *models.Team) *TeamUpdateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team update o k response
func (o *TeamUpdateOK) SetPayload(payload *models.Team) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamUpdateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TeamUpdateForbiddenCode is the HTTP code returned for type TeamUpdateForbidden
const TeamUpdateForbiddenCode int = 403

/*TeamUpdateForbidden User is not authorized

swagger:response teamUpdateForbidden
*/
type TeamUpdateForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamUpdateForbidden creates TeamUpdateForbidden with default headers values
func NewTeamUpdateForbidden() *TeamUpdateForbidden {

	return &TeamUpdateForbidden{}
}

// WithPayload adds the payload to the team update forbidden response
func (o *TeamUpdateForbidden) WithPayload(payload *models.GeneralError) *TeamUpdateForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team update forbidden response
func (o *TeamUpdateForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamUpdateForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TeamUpdatePreconditionFailedCode is the HTTP code returned for type TeamUpdatePreconditionFailed
const TeamUpdatePreconditionFailedCode int = 412

/*TeamUpdatePreconditionFailed Failed to parse request body

swagger:response teamUpdatePreconditionFailed
*/
type TeamUpdatePreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamUpdatePreconditionFailed creates TeamUpdatePreconditionFailed with default headers values
func NewTeamUpdatePreconditionFailed() *TeamUpdatePreconditionFailed {

	return &TeamUpdatePreconditionFailed{}
}

// WithPayload adds the payload to the team update precondition failed response
func (o *TeamUpdatePreconditionFailed) WithPayload(payload *models.GeneralError) *TeamUpdatePreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team update precondition failed response
func (o *TeamUpdatePreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamUpdatePreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TeamUpdateUnprocessableEntityCode is the HTTP code returned for type TeamUpdateUnprocessableEntity
const TeamUpdateUnprocessableEntityCode int = 422

/*TeamUpdateUnprocessableEntity Failed to validate request

swagger:response teamUpdateUnprocessableEntity
*/
type TeamUpdateUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewTeamUpdateUnprocessableEntity creates TeamUpdateUnprocessableEntity with default headers values
func NewTeamUpdateUnprocessableEntity() *TeamUpdateUnprocessableEntity {

	return &TeamUpdateUnprocessableEntity{}
}

// WithPayload adds the payload to the team update unprocessable entity response
func (o *TeamUpdateUnprocessableEntity) WithPayload(payload *models.ValidationError) *TeamUpdateUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team update unprocessable entity response
func (o *TeamUpdateUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamUpdateUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*TeamUpdateDefault Some error unrelated to the handler

swagger:response teamUpdateDefault
*/
type TeamUpdateDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamUpdateDefault creates TeamUpdateDefault with default headers values
func NewTeamUpdateDefault(code int) *TeamUpdateDefault {
	if code <= 0 {
		code = 500
	}

	return &TeamUpdateDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the team update default response
func (o *TeamUpdateDefault) WithStatusCode(code int) *TeamUpdateDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the team update default response
func (o *TeamUpdateDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the team update default response
func (o *TeamUpdateDefault) WithPayload(payload *models.GeneralError) *TeamUpdateDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team update default response
func (o *TeamUpdateDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamUpdateDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
