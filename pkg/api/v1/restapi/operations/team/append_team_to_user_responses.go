// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gopad/gopad-api/pkg/api/v1/models"
)

// AppendTeamToUserOKCode is the HTTP code returned for type AppendTeamToUserOK
const AppendTeamToUserOKCode int = 200

/*AppendTeamToUserOK Plain success message

swagger:response appendTeamToUserOK
*/
type AppendTeamToUserOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendTeamToUserOK creates AppendTeamToUserOK with default headers values
func NewAppendTeamToUserOK() *AppendTeamToUserOK {

	return &AppendTeamToUserOK{}
}

// WithPayload adds the payload to the append team to user o k response
func (o *AppendTeamToUserOK) WithPayload(payload *models.GeneralError) *AppendTeamToUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to user o k response
func (o *AppendTeamToUserOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendTeamToUserForbiddenCode is the HTTP code returned for type AppendTeamToUserForbidden
const AppendTeamToUserForbiddenCode int = 403

/*AppendTeamToUserForbidden User is not authorized

swagger:response appendTeamToUserForbidden
*/
type AppendTeamToUserForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendTeamToUserForbidden creates AppendTeamToUserForbidden with default headers values
func NewAppendTeamToUserForbidden() *AppendTeamToUserForbidden {

	return &AppendTeamToUserForbidden{}
}

// WithPayload adds the payload to the append team to user forbidden response
func (o *AppendTeamToUserForbidden) WithPayload(payload *models.GeneralError) *AppendTeamToUserForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to user forbidden response
func (o *AppendTeamToUserForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendTeamToUserNotFoundCode is the HTTP code returned for type AppendTeamToUserNotFound
const AppendTeamToUserNotFoundCode int = 404

/*AppendTeamToUserNotFound Team or user not found

swagger:response appendTeamToUserNotFound
*/
type AppendTeamToUserNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendTeamToUserNotFound creates AppendTeamToUserNotFound with default headers values
func NewAppendTeamToUserNotFound() *AppendTeamToUserNotFound {

	return &AppendTeamToUserNotFound{}
}

// WithPayload adds the payload to the append team to user not found response
func (o *AppendTeamToUserNotFound) WithPayload(payload *models.GeneralError) *AppendTeamToUserNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to user not found response
func (o *AppendTeamToUserNotFound) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToUserNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendTeamToUserPreconditionFailedCode is the HTTP code returned for type AppendTeamToUserPreconditionFailed
const AppendTeamToUserPreconditionFailedCode int = 412

/*AppendTeamToUserPreconditionFailed User is already assigned

swagger:response appendTeamToUserPreconditionFailed
*/
type AppendTeamToUserPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendTeamToUserPreconditionFailed creates AppendTeamToUserPreconditionFailed with default headers values
func NewAppendTeamToUserPreconditionFailed() *AppendTeamToUserPreconditionFailed {

	return &AppendTeamToUserPreconditionFailed{}
}

// WithPayload adds the payload to the append team to user precondition failed response
func (o *AppendTeamToUserPreconditionFailed) WithPayload(payload *models.GeneralError) *AppendTeamToUserPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to user precondition failed response
func (o *AppendTeamToUserPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToUserPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendTeamToUserUnprocessableEntityCode is the HTTP code returned for type AppendTeamToUserUnprocessableEntity
const AppendTeamToUserUnprocessableEntityCode int = 422

/*AppendTeamToUserUnprocessableEntity Failed to validate request

swagger:response appendTeamToUserUnprocessableEntity
*/
type AppendTeamToUserUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewAppendTeamToUserUnprocessableEntity creates AppendTeamToUserUnprocessableEntity with default headers values
func NewAppendTeamToUserUnprocessableEntity() *AppendTeamToUserUnprocessableEntity {

	return &AppendTeamToUserUnprocessableEntity{}
}

// WithPayload adds the payload to the append team to user unprocessable entity response
func (o *AppendTeamToUserUnprocessableEntity) WithPayload(payload *models.ValidationError) *AppendTeamToUserUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to user unprocessable entity response
func (o *AppendTeamToUserUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToUserUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AppendTeamToUserDefault Some error unrelated to the handler

swagger:response appendTeamToUserDefault
*/
type AppendTeamToUserDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendTeamToUserDefault creates AppendTeamToUserDefault with default headers values
func NewAppendTeamToUserDefault(code int) *AppendTeamToUserDefault {
	if code <= 0 {
		code = 500
	}

	return &AppendTeamToUserDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the append team to user default response
func (o *AppendTeamToUserDefault) WithStatusCode(code int) *AppendTeamToUserDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the append team to user default response
func (o *AppendTeamToUserDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the append team to user default response
func (o *AppendTeamToUserDefault) WithPayload(payload *models.GeneralError) *AppendTeamToUserDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append team to user default response
func (o *AppendTeamToUserDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendTeamToUserDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
