// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TeamUpdateHandlerFunc turns a function with the right signature into a team update handler
type TeamUpdateHandlerFunc func(TeamUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TeamUpdateHandlerFunc) Handle(params TeamUpdateParams) middleware.Responder {
	return fn(params)
}

// TeamUpdateHandler interface for that can handle valid team update params
type TeamUpdateHandler interface {
	Handle(TeamUpdateParams) middleware.Responder
}

// NewTeamUpdate creates a new http.Handler for the team update operation
func NewTeamUpdate(ctx *middleware.Context, handler TeamUpdateHandler) *TeamUpdate {
	return &TeamUpdate{Context: ctx, Handler: handler}
}

/*TeamUpdate swagger:route PUT /teams/{teamID} team teamUpdate

Update a specific team

*/
type TeamUpdate struct {
	Context *middleware.Context
	Handler TeamUpdateHandler
}

func (o *TeamUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTeamUpdateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
