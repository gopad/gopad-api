// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/gopad/gopad-api/pkg/api/v1/models"
)

// DeleteTeamFromUserHandlerFunc turns a function with the right signature into a delete team from user handler
type DeleteTeamFromUserHandlerFunc func(DeleteTeamFromUserParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTeamFromUserHandlerFunc) Handle(params DeleteTeamFromUserParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// DeleteTeamFromUserHandler interface for that can handle valid delete team from user params
type DeleteTeamFromUserHandler interface {
	Handle(DeleteTeamFromUserParams, *models.User) middleware.Responder
}

// NewDeleteTeamFromUser creates a new http.Handler for the delete team from user operation
func NewDeleteTeamFromUser(ctx *middleware.Context, handler DeleteTeamFromUserHandler) *DeleteTeamFromUser {
	return &DeleteTeamFromUser{Context: ctx, Handler: handler}
}

/* DeleteTeamFromUser swagger:route DELETE /teams/{team_id}/users team deleteTeamFromUser

Remove a user from team

*/
type DeleteTeamFromUser struct {
	Context *middleware.Context
	Handler DeleteTeamFromUserHandler
}

func (o *DeleteTeamFromUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteTeamFromUserParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
