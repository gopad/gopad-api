// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TeamUserAppendHandlerFunc turns a function with the right signature into a team user append handler
type TeamUserAppendHandlerFunc func(TeamUserAppendParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TeamUserAppendHandlerFunc) Handle(params TeamUserAppendParams) middleware.Responder {
	return fn(params)
}

// TeamUserAppendHandler interface for that can handle valid team user append params
type TeamUserAppendHandler interface {
	Handle(TeamUserAppendParams) middleware.Responder
}

// NewTeamUserAppend creates a new http.Handler for the team user append operation
func NewTeamUserAppend(ctx *middleware.Context, handler TeamUserAppendHandler) *TeamUserAppend {
	return &TeamUserAppend{Context: ctx, Handler: handler}
}

/*TeamUserAppend swagger:route POST /teams/{teamID}/users team teamUserAppend

Assign a user to team

*/
type TeamUserAppend struct {
	Context *middleware.Context
	Handler TeamUserAppendHandler
}

func (o *TeamUserAppend) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTeamUserAppendParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
