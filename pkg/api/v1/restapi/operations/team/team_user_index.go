// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TeamUserIndexHandlerFunc turns a function with the right signature into a team user index handler
type TeamUserIndexHandlerFunc func(TeamUserIndexParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TeamUserIndexHandlerFunc) Handle(params TeamUserIndexParams) middleware.Responder {
	return fn(params)
}

// TeamUserIndexHandler interface for that can handle valid team user index params
type TeamUserIndexHandler interface {
	Handle(TeamUserIndexParams) middleware.Responder
}

// NewTeamUserIndex creates a new http.Handler for the team user index operation
func NewTeamUserIndex(ctx *middleware.Context, handler TeamUserIndexHandler) *TeamUserIndex {
	return &TeamUserIndex{Context: ctx, Handler: handler}
}

/*TeamUserIndex swagger:route GET /teams/{teamID}/users team teamUserIndex

Fetch all users assigned to team

*/
type TeamUserIndex struct {
	Context *middleware.Context
	Handler TeamUserIndexHandler
}

func (o *TeamUserIndex) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTeamUserIndexParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
