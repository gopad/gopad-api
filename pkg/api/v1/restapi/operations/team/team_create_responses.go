// Code generated by go-swagger; DO NOT EDIT.

package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/gopad/gopad-api/pkg/api/v1/models"
)

// TeamCreateOKCode is the HTTP code returned for type TeamCreateOK
const TeamCreateOKCode int = 200

/*TeamCreateOK The created team data

swagger:response teamCreateOK
*/
type TeamCreateOK struct {

	/*
	  In: Body
	*/
	Payload *models.Team `json:"body,omitempty"`
}

// NewTeamCreateOK creates TeamCreateOK with default headers values
func NewTeamCreateOK() *TeamCreateOK {

	return &TeamCreateOK{}
}

// WithPayload adds the payload to the team create o k response
func (o *TeamCreateOK) WithPayload(payload *models.Team) *TeamCreateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team create o k response
func (o *TeamCreateOK) SetPayload(payload *models.Team) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamCreateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TeamCreateForbiddenCode is the HTTP code returned for type TeamCreateForbidden
const TeamCreateForbiddenCode int = 403

/*TeamCreateForbidden User is not authorized

swagger:response teamCreateForbidden
*/
type TeamCreateForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamCreateForbidden creates TeamCreateForbidden with default headers values
func NewTeamCreateForbidden() *TeamCreateForbidden {

	return &TeamCreateForbidden{}
}

// WithPayload adds the payload to the team create forbidden response
func (o *TeamCreateForbidden) WithPayload(payload *models.GeneralError) *TeamCreateForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team create forbidden response
func (o *TeamCreateForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamCreateForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TeamCreatePreconditionFailedCode is the HTTP code returned for type TeamCreatePreconditionFailed
const TeamCreatePreconditionFailedCode int = 412

/*TeamCreatePreconditionFailed Failed to parse request body

swagger:response teamCreatePreconditionFailed
*/
type TeamCreatePreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamCreatePreconditionFailed creates TeamCreatePreconditionFailed with default headers values
func NewTeamCreatePreconditionFailed() *TeamCreatePreconditionFailed {

	return &TeamCreatePreconditionFailed{}
}

// WithPayload adds the payload to the team create precondition failed response
func (o *TeamCreatePreconditionFailed) WithPayload(payload *models.GeneralError) *TeamCreatePreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team create precondition failed response
func (o *TeamCreatePreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamCreatePreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// TeamCreateUnprocessableEntityCode is the HTTP code returned for type TeamCreateUnprocessableEntity
const TeamCreateUnprocessableEntityCode int = 422

/*TeamCreateUnprocessableEntity Failed to validate request

swagger:response teamCreateUnprocessableEntity
*/
type TeamCreateUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewTeamCreateUnprocessableEntity creates TeamCreateUnprocessableEntity with default headers values
func NewTeamCreateUnprocessableEntity() *TeamCreateUnprocessableEntity {

	return &TeamCreateUnprocessableEntity{}
}

// WithPayload adds the payload to the team create unprocessable entity response
func (o *TeamCreateUnprocessableEntity) WithPayload(payload *models.ValidationError) *TeamCreateUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team create unprocessable entity response
func (o *TeamCreateUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamCreateUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*TeamCreateDefault Some error unrelated to the handler

swagger:response teamCreateDefault
*/
type TeamCreateDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewTeamCreateDefault creates TeamCreateDefault with default headers values
func NewTeamCreateDefault(code int) *TeamCreateDefault {
	if code <= 0 {
		code = 500
	}

	return &TeamCreateDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the team create default response
func (o *TeamCreateDefault) WithStatusCode(code int) *TeamCreateDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the team create default response
func (o *TeamCreateDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the team create default response
func (o *TeamCreateDefault) WithPayload(payload *models.GeneralError) *TeamCreateDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the team create default response
func (o *TeamCreateDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TeamCreateDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
