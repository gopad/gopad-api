// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UserTeamDeleteHandlerFunc turns a function with the right signature into a user team delete handler
type UserTeamDeleteHandlerFunc func(UserTeamDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserTeamDeleteHandlerFunc) Handle(params UserTeamDeleteParams) middleware.Responder {
	return fn(params)
}

// UserTeamDeleteHandler interface for that can handle valid user team delete params
type UserTeamDeleteHandler interface {
	Handle(UserTeamDeleteParams) middleware.Responder
}

// NewUserTeamDelete creates a new http.Handler for the user team delete operation
func NewUserTeamDelete(ctx *middleware.Context, handler UserTeamDeleteHandler) *UserTeamDelete {
	return &UserTeamDelete{Context: ctx, Handler: handler}
}

/*UserTeamDelete swagger:route DELETE /users/{userID}/teams user userTeamDelete

Remove a team from user

*/
type UserTeamDelete struct {
	Context *middleware.Context
	Handler UserTeamDeleteHandler
}

func (o *UserTeamDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserTeamDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
