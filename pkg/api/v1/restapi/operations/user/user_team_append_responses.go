// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/gopad/gopad-api/pkg/api/v1/models"
)

// UserTeamAppendOKCode is the HTTP code returned for type UserTeamAppendOK
const UserTeamAppendOKCode int = 200

/*UserTeamAppendOK Plain success message

swagger:response userTeamAppendOK
*/
type UserTeamAppendOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserTeamAppendOK creates UserTeamAppendOK with default headers values
func NewUserTeamAppendOK() *UserTeamAppendOK {

	return &UserTeamAppendOK{}
}

// WithPayload adds the payload to the user team append o k response
func (o *UserTeamAppendOK) WithPayload(payload *models.GeneralError) *UserTeamAppendOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user team append o k response
func (o *UserTeamAppendOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserTeamAppendOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserTeamAppendForbiddenCode is the HTTP code returned for type UserTeamAppendForbidden
const UserTeamAppendForbiddenCode int = 403

/*UserTeamAppendForbidden User is not authorized

swagger:response userTeamAppendForbidden
*/
type UserTeamAppendForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserTeamAppendForbidden creates UserTeamAppendForbidden with default headers values
func NewUserTeamAppendForbidden() *UserTeamAppendForbidden {

	return &UserTeamAppendForbidden{}
}

// WithPayload adds the payload to the user team append forbidden response
func (o *UserTeamAppendForbidden) WithPayload(payload *models.GeneralError) *UserTeamAppendForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user team append forbidden response
func (o *UserTeamAppendForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserTeamAppendForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserTeamAppendPreconditionFailedCode is the HTTP code returned for type UserTeamAppendPreconditionFailed
const UserTeamAppendPreconditionFailedCode int = 412

/*UserTeamAppendPreconditionFailed Failed to parse request body

swagger:response userTeamAppendPreconditionFailed
*/
type UserTeamAppendPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserTeamAppendPreconditionFailed creates UserTeamAppendPreconditionFailed with default headers values
func NewUserTeamAppendPreconditionFailed() *UserTeamAppendPreconditionFailed {

	return &UserTeamAppendPreconditionFailed{}
}

// WithPayload adds the payload to the user team append precondition failed response
func (o *UserTeamAppendPreconditionFailed) WithPayload(payload *models.GeneralError) *UserTeamAppendPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user team append precondition failed response
func (o *UserTeamAppendPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserTeamAppendPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserTeamAppendUnprocessableEntityCode is the HTTP code returned for type UserTeamAppendUnprocessableEntity
const UserTeamAppendUnprocessableEntityCode int = 422

/*UserTeamAppendUnprocessableEntity Team is already assigned

swagger:response userTeamAppendUnprocessableEntity
*/
type UserTeamAppendUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserTeamAppendUnprocessableEntity creates UserTeamAppendUnprocessableEntity with default headers values
func NewUserTeamAppendUnprocessableEntity() *UserTeamAppendUnprocessableEntity {

	return &UserTeamAppendUnprocessableEntity{}
}

// WithPayload adds the payload to the user team append unprocessable entity response
func (o *UserTeamAppendUnprocessableEntity) WithPayload(payload *models.GeneralError) *UserTeamAppendUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user team append unprocessable entity response
func (o *UserTeamAppendUnprocessableEntity) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserTeamAppendUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UserTeamAppendDefault Some error unrelated to the handler

swagger:response userTeamAppendDefault
*/
type UserTeamAppendDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserTeamAppendDefault creates UserTeamAppendDefault with default headers values
func NewUserTeamAppendDefault(code int) *UserTeamAppendDefault {
	if code <= 0 {
		code = 500
	}

	return &UserTeamAppendDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the user team append default response
func (o *UserTeamAppendDefault) WithStatusCode(code int) *UserTeamAppendDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the user team append default response
func (o *UserTeamAppendDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the user team append default response
func (o *UserTeamAppendDefault) WithPayload(payload *models.GeneralError) *UserTeamAppendDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user team append default response
func (o *UserTeamAppendDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserTeamAppendDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
