// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AppendUserToTeamHandlerFunc turns a function with the right signature into a append user to team handler
type AppendUserToTeamHandlerFunc func(AppendUserToTeamParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AppendUserToTeamHandlerFunc) Handle(params AppendUserToTeamParams) middleware.Responder {
	return fn(params)
}

// AppendUserToTeamHandler interface for that can handle valid append user to team params
type AppendUserToTeamHandler interface {
	Handle(AppendUserToTeamParams) middleware.Responder
}

// NewAppendUserToTeam creates a new http.Handler for the append user to team operation
func NewAppendUserToTeam(ctx *middleware.Context, handler AppendUserToTeamHandler) *AppendUserToTeam {
	return &AppendUserToTeam{Context: ctx, Handler: handler}
}

/*AppendUserToTeam swagger:route POST /users/{userID}/teams user appendUserToTeam

Assign a team to user

*/
type AppendUserToTeam struct {
	Context *middleware.Context
	Handler AppendUserToTeamHandler
}

func (o *AppendUserToTeam) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAppendUserToTeamParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
