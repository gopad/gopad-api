// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/gopad/gopad-api/pkg/api/v1/models"
)

// UserUpdateOKCode is the HTTP code returned for type UserUpdateOK
const UserUpdateOKCode int = 200

/*UserUpdateOK The updated user details

swagger:response userUpdateOK
*/
type UserUpdateOK struct {

	/*
	  In: Body
	*/
	Payload *models.User `json:"body,omitempty"`
}

// NewUserUpdateOK creates UserUpdateOK with default headers values
func NewUserUpdateOK() *UserUpdateOK {

	return &UserUpdateOK{}
}

// WithPayload adds the payload to the user update o k response
func (o *UserUpdateOK) WithPayload(payload *models.User) *UserUpdateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user update o k response
func (o *UserUpdateOK) SetPayload(payload *models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserUpdateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserUpdateForbiddenCode is the HTTP code returned for type UserUpdateForbidden
const UserUpdateForbiddenCode int = 403

/*UserUpdateForbidden User is not authorized

swagger:response userUpdateForbidden
*/
type UserUpdateForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserUpdateForbidden creates UserUpdateForbidden with default headers values
func NewUserUpdateForbidden() *UserUpdateForbidden {

	return &UserUpdateForbidden{}
}

// WithPayload adds the payload to the user update forbidden response
func (o *UserUpdateForbidden) WithPayload(payload *models.GeneralError) *UserUpdateForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user update forbidden response
func (o *UserUpdateForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserUpdateForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserUpdatePreconditionFailedCode is the HTTP code returned for type UserUpdatePreconditionFailed
const UserUpdatePreconditionFailedCode int = 412

/*UserUpdatePreconditionFailed Failed to parse request body

swagger:response userUpdatePreconditionFailed
*/
type UserUpdatePreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserUpdatePreconditionFailed creates UserUpdatePreconditionFailed with default headers values
func NewUserUpdatePreconditionFailed() *UserUpdatePreconditionFailed {

	return &UserUpdatePreconditionFailed{}
}

// WithPayload adds the payload to the user update precondition failed response
func (o *UserUpdatePreconditionFailed) WithPayload(payload *models.GeneralError) *UserUpdatePreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user update precondition failed response
func (o *UserUpdatePreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserUpdatePreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserUpdateUnprocessableEntityCode is the HTTP code returned for type UserUpdateUnprocessableEntity
const UserUpdateUnprocessableEntityCode int = 422

/*UserUpdateUnprocessableEntity Failed to validate request

swagger:response userUpdateUnprocessableEntity
*/
type UserUpdateUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewUserUpdateUnprocessableEntity creates UserUpdateUnprocessableEntity with default headers values
func NewUserUpdateUnprocessableEntity() *UserUpdateUnprocessableEntity {

	return &UserUpdateUnprocessableEntity{}
}

// WithPayload adds the payload to the user update unprocessable entity response
func (o *UserUpdateUnprocessableEntity) WithPayload(payload *models.ValidationError) *UserUpdateUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user update unprocessable entity response
func (o *UserUpdateUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserUpdateUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UserUpdateDefault Some error unrelated to the handler

swagger:response userUpdateDefault
*/
type UserUpdateDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewUserUpdateDefault creates UserUpdateDefault with default headers values
func NewUserUpdateDefault(code int) *UserUpdateDefault {
	if code <= 0 {
		code = 500
	}

	return &UserUpdateDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the user update default response
func (o *UserUpdateDefault) WithStatusCode(code int) *UserUpdateDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the user update default response
func (o *UserUpdateDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the user update default response
func (o *UserUpdateDefault) WithPayload(payload *models.GeneralError) *UserUpdateDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user update default response
func (o *UserUpdateDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserUpdateDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
