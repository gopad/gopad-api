// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gopad/gopad-api/pkg/api/v1/models"
)

// AppendUserToTeamOKCode is the HTTP code returned for type AppendUserToTeamOK
const AppendUserToTeamOKCode int = 200

/*AppendUserToTeamOK Plain success message

swagger:response appendUserToTeamOK
*/
type AppendUserToTeamOK struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendUserToTeamOK creates AppendUserToTeamOK with default headers values
func NewAppendUserToTeamOK() *AppendUserToTeamOK {

	return &AppendUserToTeamOK{}
}

// WithPayload adds the payload to the append user to team o k response
func (o *AppendUserToTeamOK) WithPayload(payload *models.GeneralError) *AppendUserToTeamOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append user to team o k response
func (o *AppendUserToTeamOK) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendUserToTeamOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendUserToTeamForbiddenCode is the HTTP code returned for type AppendUserToTeamForbidden
const AppendUserToTeamForbiddenCode int = 403

/*AppendUserToTeamForbidden User is not authorized

swagger:response appendUserToTeamForbidden
*/
type AppendUserToTeamForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendUserToTeamForbidden creates AppendUserToTeamForbidden with default headers values
func NewAppendUserToTeamForbidden() *AppendUserToTeamForbidden {

	return &AppendUserToTeamForbidden{}
}

// WithPayload adds the payload to the append user to team forbidden response
func (o *AppendUserToTeamForbidden) WithPayload(payload *models.GeneralError) *AppendUserToTeamForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append user to team forbidden response
func (o *AppendUserToTeamForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendUserToTeamForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendUserToTeamNotFoundCode is the HTTP code returned for type AppendUserToTeamNotFound
const AppendUserToTeamNotFoundCode int = 404

/*AppendUserToTeamNotFound User or team not found

swagger:response appendUserToTeamNotFound
*/
type AppendUserToTeamNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendUserToTeamNotFound creates AppendUserToTeamNotFound with default headers values
func NewAppendUserToTeamNotFound() *AppendUserToTeamNotFound {

	return &AppendUserToTeamNotFound{}
}

// WithPayload adds the payload to the append user to team not found response
func (o *AppendUserToTeamNotFound) WithPayload(payload *models.GeneralError) *AppendUserToTeamNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append user to team not found response
func (o *AppendUserToTeamNotFound) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendUserToTeamNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendUserToTeamPreconditionFailedCode is the HTTP code returned for type AppendUserToTeamPreconditionFailed
const AppendUserToTeamPreconditionFailedCode int = 412

/*AppendUserToTeamPreconditionFailed Team is already assigned

swagger:response appendUserToTeamPreconditionFailed
*/
type AppendUserToTeamPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendUserToTeamPreconditionFailed creates AppendUserToTeamPreconditionFailed with default headers values
func NewAppendUserToTeamPreconditionFailed() *AppendUserToTeamPreconditionFailed {

	return &AppendUserToTeamPreconditionFailed{}
}

// WithPayload adds the payload to the append user to team precondition failed response
func (o *AppendUserToTeamPreconditionFailed) WithPayload(payload *models.GeneralError) *AppendUserToTeamPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append user to team precondition failed response
func (o *AppendUserToTeamPreconditionFailed) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendUserToTeamPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppendUserToTeamUnprocessableEntityCode is the HTTP code returned for type AppendUserToTeamUnprocessableEntity
const AppendUserToTeamUnprocessableEntityCode int = 422

/*AppendUserToTeamUnprocessableEntity Failed to validate request

swagger:response appendUserToTeamUnprocessableEntity
*/
type AppendUserToTeamUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ValidationError `json:"body,omitempty"`
}

// NewAppendUserToTeamUnprocessableEntity creates AppendUserToTeamUnprocessableEntity with default headers values
func NewAppendUserToTeamUnprocessableEntity() *AppendUserToTeamUnprocessableEntity {

	return &AppendUserToTeamUnprocessableEntity{}
}

// WithPayload adds the payload to the append user to team unprocessable entity response
func (o *AppendUserToTeamUnprocessableEntity) WithPayload(payload *models.ValidationError) *AppendUserToTeamUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append user to team unprocessable entity response
func (o *AppendUserToTeamUnprocessableEntity) SetPayload(payload *models.ValidationError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendUserToTeamUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AppendUserToTeamDefault Some error unrelated to the handler

swagger:response appendUserToTeamDefault
*/
type AppendUserToTeamDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewAppendUserToTeamDefault creates AppendUserToTeamDefault with default headers values
func NewAppendUserToTeamDefault(code int) *AppendUserToTeamDefault {
	if code <= 0 {
		code = 500
	}

	return &AppendUserToTeamDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the append user to team default response
func (o *AppendUserToTeamDefault) WithStatusCode(code int) *AppendUserToTeamDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the append user to team default response
func (o *AppendUserToTeamDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the append user to team default response
func (o *AppendUserToTeamDefault) WithPayload(payload *models.GeneralError) *AppendUserToTeamDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the append user to team default response
func (o *AppendUserToTeamDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppendUserToTeamDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
