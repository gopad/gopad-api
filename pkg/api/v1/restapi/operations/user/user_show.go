// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UserShowHandlerFunc turns a function with the right signature into a user show handler
type UserShowHandlerFunc func(UserShowParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserShowHandlerFunc) Handle(params UserShowParams) middleware.Responder {
	return fn(params)
}

// UserShowHandler interface for that can handle valid user show params
type UserShowHandler interface {
	Handle(UserShowParams) middleware.Responder
}

// NewUserShow creates a new http.Handler for the user show operation
func NewUserShow(ctx *middleware.Context, handler UserShowHandler) *UserShow {
	return &UserShow{Context: ctx, Handler: handler}
}

/*UserShow swagger:route GET /users/{userID} user userShow

Fetch a specific user

*/
type UserShow struct {
	Context *middleware.Context
	Handler UserShowHandler
}

func (o *UserShow) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserShowParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
