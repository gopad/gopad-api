// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/gopad/gopad-api/pkg/api/v1/models"
)

// ListUserTeamsOKCode is the HTTP code returned for type ListUserTeamsOK
const ListUserTeamsOKCode int = 200

/*ListUserTeamsOK A collection of user teams

swagger:response listUserTeamsOK
*/
type ListUserTeamsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.TeamUser `json:"body,omitempty"`
}

// NewListUserTeamsOK creates ListUserTeamsOK with default headers values
func NewListUserTeamsOK() *ListUserTeamsOK {

	return &ListUserTeamsOK{}
}

// WithPayload adds the payload to the list user teams o k response
func (o *ListUserTeamsOK) WithPayload(payload []*models.TeamUser) *ListUserTeamsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list user teams o k response
func (o *ListUserTeamsOK) SetPayload(payload []*models.TeamUser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListUserTeamsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.TeamUser, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListUserTeamsForbiddenCode is the HTTP code returned for type ListUserTeamsForbidden
const ListUserTeamsForbiddenCode int = 403

/*ListUserTeamsForbidden User is not authorized

swagger:response listUserTeamsForbidden
*/
type ListUserTeamsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewListUserTeamsForbidden creates ListUserTeamsForbidden with default headers values
func NewListUserTeamsForbidden() *ListUserTeamsForbidden {

	return &ListUserTeamsForbidden{}
}

// WithPayload adds the payload to the list user teams forbidden response
func (o *ListUserTeamsForbidden) WithPayload(payload *models.GeneralError) *ListUserTeamsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list user teams forbidden response
func (o *ListUserTeamsForbidden) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListUserTeamsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ListUserTeamsDefault Some error unrelated to the handler

swagger:response listUserTeamsDefault
*/
type ListUserTeamsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.GeneralError `json:"body,omitempty"`
}

// NewListUserTeamsDefault creates ListUserTeamsDefault with default headers values
func NewListUserTeamsDefault(code int) *ListUserTeamsDefault {
	if code <= 0 {
		code = 500
	}

	return &ListUserTeamsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the list user teams default response
func (o *ListUserTeamsDefault) WithStatusCode(code int) *ListUserTeamsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the list user teams default response
func (o *ListUserTeamsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the list user teams default response
func (o *ListUserTeamsDefault) WithPayload(payload *models.GeneralError) *ListUserTeamsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list user teams default response
func (o *ListUserTeamsDefault) SetPayload(payload *models.GeneralError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListUserTeamsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
