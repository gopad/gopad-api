// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TeamUserParams team user params
//
// swagger:model team_user_params
type TeamUserParams struct {

	// perm
	// Required: true
	// Enum: [user admin owner]
	Perm *string `json:"perm"`

	// user
	// Required: true
	User *string `json:"user"`
}

// Validate validates this team user params
func (m *TeamUserParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePerm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var teamUserParamsTypePermPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","admin","owner"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		teamUserParamsTypePermPropEnum = append(teamUserParamsTypePermPropEnum, v)
	}
}

const (

	// TeamUserParamsPermUser captures enum value "user"
	TeamUserParamsPermUser string = "user"

	// TeamUserParamsPermAdmin captures enum value "admin"
	TeamUserParamsPermAdmin string = "admin"

	// TeamUserParamsPermOwner captures enum value "owner"
	TeamUserParamsPermOwner string = "owner"
)

// prop value enum
func (m *TeamUserParams) validatePermEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, teamUserParamsTypePermPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TeamUserParams) validatePerm(formats strfmt.Registry) error {

	if err := validate.Required("perm", "body", m.Perm); err != nil {
		return err
	}

	// value enum
	if err := m.validatePermEnum("perm", "body", *m.Perm); err != nil {
		return err
	}

	return nil
}

func (m *TeamUserParams) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this team user params based on context it is used
func (m *TeamUserParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TeamUserParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TeamUserParams) UnmarshalBinary(b []byte) error {
	var res TeamUserParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
